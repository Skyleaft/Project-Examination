@page "/user/register";
@using global::Shared.Common
@using global::Shared.Users
@using Microsoft.EntityFrameworkCore
@using Web.Common.Database
@using Web.Components.Features.UserManagement
@layout BlankLayout


<EditForm Model="userModel" method="post" OnValidSubmit="OnValidSubmit" FormName="register" >
    <DataAnnotationsValidator/>
    <MudGrid Class="align-content-center justify-center">
        <MudItem xs=12 md=8>
            <MudCard Class="pa-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Daftar Akun</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudCard>
                                <MudCardHeader>
                                    <MudText Typo="Typo.h6">Profile User</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField Label="Nama Lengkap" HelperText="Max. 40 characters"
                                                  Variant="Variant.Outlined"
                                                  MaxLength="40"
                                                  @bind-Value="userModel.NamaLengkap"
                                                  For="@(() => userModel.NamaLengkap)"/>
                                    <MudRadioGroup T="int" ValueChanged="i => userModel.Gender=(Gender)i" Class="mt-4">
                                        <MudRadio Value="1"
                                                  Color="Color.Primary">
                                            Perempuan
                                        </MudRadio>
                                        <MudRadio Value="0"
                                                  Color="Color.Primary">
                                            Laki - Laki
                                        </MudRadio>

                                    </MudRadioGroup>
                                    <MudSelect T="string" Label="Pekerjaan"
                                               Class="mt-3"
                                               @bind-Value="userModel.Pekerjaan"
                                               Variant="Variant.Outlined"
                                               AnchorOrigin="Origin.BottomCenter">
                                        <MudSelectItem T="string" Value="@("Mahasiswa")">Mahasiswa</MudSelectItem>
                                        <MudSelectItem T="string" Value="@("Alumni")">Alumni</MudSelectItem>
                                        <MudSelectItem T="string" Value="@("Umum")">Umum</MudSelectItem>
                                    </MudSelect>
                                    <MudTextField Label="Nomor Telepon" HelperText="Max. 15 characters"
                                                  Class="mt-3"
                                                  Variant="Variant.Outlined"
                                                  MaxLength="15"
                                                  InputType="InputType.Number"
                                                  @bind-Value="userModel.PhoneNumber"
                                                  For="@(() => userModel.PhoneNumber)"/>
                                    <MudAutocomplete T="Provinsi" Label="Provinsi"
                                                     Variant="Variant.Outlined"
                                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                                     Strict="false"
                                                     ValueChanged="(Provinsi selected) => { SelectedProv = selected; FilterKota(SelectedProv.Id); SelectedKota = null; }"
                                                     ToStringFunc="@(e => e == null ? null : $"{e.NamaProvinsi}")"
                                                     SearchFunc="@SearchProv"/>
                                    @{
                                    if (SelectedProv != null)
                                    {
                                    FilterKota(SelectedProv.Id);
                                    <MudAutocomplete T="Kota" Label="Kota"
                                                     Variant="Variant.Outlined"
                                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                                     Strict="false"
                                                     ValueChanged="kota => { SelectedKota = kota; userModel.KotaId = kota.Id; }"
                                                     ToStringFunc="@(e => e == null ? null : $"{e.NamaKota}")"
                                                     SearchFunc="@SearchKota"/>
                                    }
                                    }

                                </MudCardContent>
                            </MudCard>

                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudCard>
                                <MudCardHeader>
                                    <MudText Typo="Typo.h6">Akun Login</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField Label="Email" Class="mt-3"
                                                  Required
                                                  Variant="Variant.Outlined"
                                                  @bind-Value="userModel.Email"
                                                  For="@(() => userModel.Email)"/>
                                    <MudTextField Label="Username" Class="mt-3"
                                                  Variant="Variant.Outlined"
                                                  Required
                                                  @bind-Value="userModel.UserName"
                                                  For="@(() => userModel.UserName)"/>
                                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                                  Variant="Variant.Outlined"
                                                  Required
                                                  @bind-Value="userModel.Password"
                                                  For="@(() => userModel.Password)" InputType="InputType.Password"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

</EditForm>
@code {
    [Inject] AppDbContext _appDbContext { get; set; }
    
    private UserDTO userModel = new UserDTO()
    {
        Role = "User"
    };
    
    
    Provinsi SelectedProv = null;
    Kota SelectedKota = null;
    
    List<Provinsi> dataProv = new List<Provinsi>();
    List<Kota> dataKota = new List<Kota>();
    List<Kota> filterKota = new List<Kota>();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            dataProv = await _appDbContext.Provinsi.ToListAsync();
            dataKota = await _appDbContext.Kota.ToListAsync();
            StateHasChanged();
        }
    }
    private void OnValidSubmit(EditContext obj)
    {
        throw new NotImplementedException();
    }
    
    public async Task FilterKota(string ProvID)
    {
        filterKota = dataKota
            .Where(x => x.ProvinsiId == ProvID)
            .ToList();
    }
    
    private async Task<IEnumerable<Provinsi>> SearchProv(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return dataProv;
        return dataProv
            .Where(x => x.NamaProvinsi
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private async Task<IEnumerable<Kota>> SearchKota(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return filterKota;
        return filterKota
            .Where(x => x.NamaKota
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

}
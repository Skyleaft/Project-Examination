@page "/UserManagement"
@using System.Text.Json
@using global::Shared.Common
@using global::Shared.Users
@using Web.Components.Features.UserManagement.Dialog
@using Mapster
@using Web.Components.Features.Auth
@inject HttpClient httpClient
@inject IDialogService Dialog
@attribute [Authorize]
@rendermode InteractiveServer

<h3>UserManagement</h3>

<MudTable ServerData="ServerReload"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton OnClick="@((e) => OpenDialog())"
                   Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Outlined.PersonAdd"
                   Color="Color.Primary">
            Tambah
        </MudButton>
        <MudSpacer/>
        <MudTextField T="string"
                      ValueChanged="@(s => OnSearch(s))"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="NamaLengkap" T="ApplicationUser">Nama Lengkap</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Gender" T="ApplicationUser">Gender</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="UserName" T="ApplicationUser">UserName</MudTableSortLabel>
        </MudTh>
        <MudTh>
            Action
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="NamaLengkap">@context.NamaLengkap</MudTd>
        <MudTd DataLabel="Jenis Kelamin">@setGender(context.Gender)</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Action">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" OnClick="()=>OnDelete(context)"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit" OnClick="()=>OnEdit(context)"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Inject] private IUser UserService { get; set; }
    
    private IEnumerable<ApplicationUser> pagedData;
    private MudTable<ApplicationUser> table;
    
    private int totalItems;
    private string searchString = "";

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, BackgroundClass = "bg-filter" };
    
    
    private string setGender(Gender gender)
    {
        return gender == Gender.LakiLaki ? "Laki - Laki" : "Perempuan";
    }
    private async Task OpenDialog()
    {
        var form =await Dialog.ShowAsync<AddUserDialog>("Tambah User", maxWidth);
        var result = await form.Result;
        if(!result.Canceled)
            await table.ReloadServerData();
    }

    

    private async Task<TableData<ApplicationUser>> ServerReload(TableState state, CancellationToken token)
    {
        var req = new FindRequest();
        req.Page = state.Page;
        req.PageSize = state.PageSize;
        req.Search = searchString;
        req.OrderBy = state.SortLabel;
        req.Direction = (int)state.SortDirection;
        var data = await UserService.Find(req,token);
        if (data == null)
        {
            return new TableData<ApplicationUser>() { TotalItems = 0, Items = new List<ApplicationUser>() };
        }
        totalItems = data.TotalItems;
        pagedData = data.Items;
        return new TableData<ApplicationUser>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnDelete(ApplicationUser data)
    {
        var result = await Dialog.ShowMessageBox(
            "Warning",
            $"Yakin Mau Dihapus UserName :{data.UserName}",
            yesText: "Delete",cancelText:"Cancel");
        StateHasChanged();
        if (result!=null)
        {
            var res = await UserService.Delete(data.Adapt<UserDTO>());
            if (res.Flag)
            {
                await Dialog.ShowMessageBox(
                    "Info",
                    res.Message,
                    yesText: "Ok");
                await table.ReloadServerData();
            }
            else
            {
                await Dialog.ShowMessageBox(
                    "Error",
                    res.Message,
                    yesText: "Ok");
            }
                
        }
        
    }

    private async Task OnEdit(ApplicationUser data)
    {
        var userDTO = await UserService.Get(data.Id);
        var edit = userDTO.Adapt<UserEditDTO>();
        var parameters = new DialogParameters<EditUserDialog> { { x => x.userModel, edit } };
        var form =await Dialog.ShowAsync<EditUserDialog>("Edit User", parameters,maxWidth);
        var result = await form.Result;
        if(!result.Canceled)
            await table.ReloadServerData();
    }

}
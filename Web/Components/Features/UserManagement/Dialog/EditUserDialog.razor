@using System.Net
@using Domain.Common
@using Mapster
@using Web.Components.Features.Auth
@using Microsoft.EntityFrameworkCore
@using Web.Common.Database
@using Domain.Users
@inject HttpClient HttpClient
<EditForm Model="@userModel" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Profile User</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@userModel.Gender</MudText>
                            <MudTextField Label="Nama Lengkap" HelperText="Max. 40 characters"
                                          Variant="Variant.Outlined"
                                          MaxLength="40"
                                          @bind-Value="userModel.NamaLengkap"
                                          For="@(() => userModel.NamaLengkap)"/>
                            <MudRadioGroup T="int" ValueChanged="i => userModel.Gender = (Gender)i" Value="(int)userModel.Gender" Class="mt-4">
                                <MudRadio Value="1"
                                          Color="Color.Primary">
                                    Perempuan
                                </MudRadio>
                                <MudRadio Value="0"
                                          Color="Color.Primary">
                                    Laki - Laki
                                </MudRadio>

                            </MudRadioGroup>
                            <MudSelect T="string" Label="Pekerjaan"
                                       Class="mt-3"
                                       @bind-Value="userModel.Pekerjaan"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem T="string" Value="@("Mahasiswa")">Mahasiswa</MudSelectItem>
                                <MudSelectItem T="string" Value="@("Alumni")">Alumni</MudSelectItem>
                                <MudSelectItem T="string" Value="@("Umum")">Umum</MudSelectItem>
                            </MudSelect>
                            <MudTextField Label="Nomor Telepon" HelperText="Max. 15 characters"
                                          Class="mt-3"
                                          Variant="Variant.Outlined"
                                          MaxLength="15"
                                          InputType="InputType.Number"
                                          @bind-Value="userModel.PhoneNumber"
                                          For="@(() => userModel.PhoneNumber)"/>
                            <MudAutocomplete T="Provinsi" Label="Provinsi"
                                             Variant="Variant.Outlined"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                             Strict="false"
                                             Value="SelectedProv"
                                             ValueChanged="(Provinsi selected) => { SelectedProv = selected; FilterKota(SelectedProv.Id); SelectedKota = null; }"
                                             ToStringFunc="@(e => e == null ? null : $"{e.NamaProvinsi}")"
                                             SearchFunc="@SearchProv"/>
                            @{
                                if (SelectedProv != null)
                                {
                                    FilterKota(SelectedProv.Id);
                                    <MudAutocomplete T="Kota" Label="Kota"
                                                     Variant="Variant.Outlined"
                                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                                     Strict="false"
                                                     Value="SelectedKota"
                                                     ValueChanged="kota => { SelectedKota = kota; userModel.KotaId = kota.Id; }"
                                                     ToStringFunc="@(e => e == null ? null : $"{e.NamaKota}")"
                                                     SearchFunc="@SearchKota"/>
                                }
                            }

                        </MudCardContent>
                    </MudCard>

                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Akun Login</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudFileUpload T="IBrowserFile"
                                           Accept=".png, .jpg"
                                           MaximumFileCount="1"
                                           @bind-Files="fileModel.File"
                                           OnFilesChanged="UploadFiles">
                                <ButtonTemplate>
                                    <MudFab HtmlTag="label"
                                            Color="Color.Secondary"
                                            Icon="@Icons.Material.Filled.Image"
                                            Label="Load picture"
                                            For="@(() => fileModel.File)" />
                                </ButtonTemplate>
                            </MudFileUpload>
                            <MudSelect T="string" Label="Role"
                                       @bind-Value="userModel.Role"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem T="string" Value="@("Operator")">Operator</MudSelectItem>
                                <MudSelectItem T="string" Value="@("Dosen")">Dosen</MudSelectItem>
                                <MudSelectItem T="string" Value="@("User")">User</MudSelectItem>
                            </MudSelect>
                            <MudTextField Label="Email" Class="mt-3"
                                          Variant="Variant.Outlined"
                                          @bind-Value="userModel.Email"
                                          For="@(() => userModel.Email)"/>
                            <MudTextField Label="Username" Class="mt-3"
                                          Variant="Variant.Outlined"
                                          ReadOnly
                                          @bind-Value="userModel.UserName"
                                          For="@(() => userModel.UserName)"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Edit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public UserEditDTO userModel { get; set; } = new UserEditDTO();
    [Inject] AppDbContext _appDbContext { get; set; }
    [Inject] private IUser userService { get; set; }
    
    Provinsi SelectedProv = null;
    Kota SelectedKota = null;
    List<Provinsi> dataProv = new List<Provinsi>();
    List<Kota> dataKota = new List<Kota>();
    List<Kota> filterKota = new List<Kota>();
    private FileModel fileModel = new();
    void Cancel() => MudDialog.Cancel();
    bool success;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            dataProv = await _appDbContext.Provinsi.ToListAsync();
            dataKota = await _appDbContext.Kota.ToListAsync();
            StateHasChanged();
        }
    }
    
    
    private void UploadFiles(InputFileChangeEventArgs  e)
    {
        var stream = fileModel.File.OpenReadStream();
        using (var memstream = new MemoryStream())
        {
            stream.CopyTo(memstream);
            userModel.Photo = memstream.ToArray();
        }
        
    }
    
    public async Task FilterKota(string ProvID)
    {
        filterKota = dataKota
            .Where(x => x.ProvinsiId == ProvID)
            .ToList();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
        var dial = await DialogService.ShowAsync<BluryDialog>("Updating...", options);
        var res = await userService.Update(userModel);
        if (res.Flag)
        {
            dial.Close();
            MudDialog.Close(DialogResult.Ok(true));
            DialogService.ShowMessageBox(
                "Info",
                res.Message,
                yesText: "Ok");
        }
        else
        {
            dial.Close();
            DialogService.ShowMessageBox(
                "Error",
                res.Message,
                yesText: "Ok");
        }

    }
    
    private async Task<IEnumerable<Provinsi>> SearchProv(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return dataProv;
        return dataProv
            .Where(x => x.NamaProvinsi
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private async Task<IEnumerable<Kota>> SearchKota(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return filterKota;
        return filterKota
            .Where(x => x.NamaKota
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }
    
    public class FileModel
    {
        public string Name { get; set; }
        public IBrowserFile File { get; set; }
    }
}
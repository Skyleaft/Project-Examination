@using System.Net
@using Domain.Common
@using Mapster
@using Web.Components.Features.Auth
@using Domain.Users
@inject HttpClient HttpClient
<EditForm Model="@userModel" OnValidSubmit="OnValidSubmit">
    <ObjectGraphDataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardHeader><MudText Typo="Typo.h6">Profile User</MudText></MudCardHeader>
                        <MudCardContent>

                            <MudTextField Label="Nama Lengkap" HelperText="Max. 40 characters"
                                          @bind-Value="userModel.NamaLengkap"
                                          For="@(() => userModel.NamaLengkap)"/>
                            <MudDatePicker Label="Tanggal Lahir" Class="mt-3" @bind-Date="userModel.TangalLahir"/>
                            <MudRadioGroup T="Gender" @bind-Value="@userModel.Gender" Class="mt-4">
                                <MudRadio Value="Gender.LakiLaki"
                                    Color="Color.Primary">
                                    Laki - Laki
                                </MudRadio>
                                <MudRadio Value="Gender.Perempuan"
                                    Color="Color.Primary">
                                    Perempuan
                                </MudRadio>
                            </MudRadioGroup>
                        </MudCardContent>
                    </MudCard>

                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardHeader><MudText Typo="Typo.h6">Akun Login</MudText></MudCardHeader>
                        <MudCardContent>

                            <MudTextField Label="Email" Class="mt-3"
                                          Variant="Variant.Outlined"
                                          @bind-Value="userModel.Email"
                                          For="@(() => userModel.Email)"/>
                            <MudTextField Label="Username" Class="mt-3"
                                          Variant="Variant.Outlined"
                                          @bind-Value="userModel.UserName"
                                          ReadOnly
                                          For="@(() => userModel.UserName)"/>
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                          Variant="Variant.Outlined"
                                          @bind-Value="userModel.Password"
                                          For="@(() => userModel.Password)" InputType="InputType.Password"/>

                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Edit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public UserDTO userModel { get; set; } = new UserDTO();
    
    void Cancel() => MudDialog.Cancel();
    bool success;
    

    private async Task OnValidSubmit(EditContext context)
    {
        // success = true;
        // var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
        // var dial = await DialogService.ShowAsync<BluryDialog>("Updating...", options);
        // var res =await HttpClient.PutAsJsonAsync($"api/users/{userModel.Id}",userModel);
        // StateHasChanged();
        // if (res.IsSuccessStatusCode)
        // {
        //     dial.Close();
        //     MudDialog.Close(DialogResult.Ok(true));
        //     DialogService.ShowMessageBox(
        //         "Info",
        //         "Data Berhasil Diubah",
        //         yesText: "Ok");
        // }
        // else if (res.StatusCode == HttpStatusCode.BadRequest)
        // {
        //     dial.Close();
        //     var data = await res.Content.ReadAsStringAsync();
        //     DialogService.ShowMessageBox(
        //         "Validation Error",
        //         data,
        //         yesText: "Ok");
        // }
        // else
        // {
        //     dial.Close();
        //     DialogService.ShowMessageBox(
        //         "Error",
        //         res.ReasonPhrase,
        //         yesText: "Ok");
        // }
            
        
    }

}
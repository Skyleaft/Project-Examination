@page "/client/BankSoal/Create"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Web.Client.Shared.Layout
@rendermode InteractiveWebAssembly
@layout WASMLayout
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Bank Soal</h3>
<MudButton OnClick="checkauth">CheckAuth</MudButton>
@if (claims.Count() > 0)
{
<ul>
    @foreach (var claim in claims)
    {
    <li>@claim.Type: @claim.Value</li>
    }
</ul>
}
<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
    </Authorized>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>
<MudButton OnClick="Back" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack">Kembali ke Menu</MudButton>
<MudCheckBox Label="Read only" @bind-Value="@_readOnly"/>

<MudExRichTextEdit @ref="@Editor"
                   ReadOnly="@_readOnly"
                   Height="444"
                   Immediate="true"
                   Class="m-2"
                   Placeholder="Edit html">

</MudExRichTextEdit>

<textarea class="m-2" style="width: 100%; height: 400px;" readonly="readonly">@pertanyaan</textarea>
@code {
    
    [Inject] NavigationManager _navigationManager { get; set; }
    bool _readOnly = false;
    MudExRichTextEdit Editor;
    private string pertanyaan;
    
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private void Back(MouseEventArgs obj)
    {
        _navigationManager.NavigateTo("/BankSoal",true);
    }

    public async Task checkauth()
    {
        
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;
        claims = user.Claims;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
        }

    }

}
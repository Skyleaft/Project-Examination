@page "/client/BankSoal/Create/{Id:int?}"
@using global::Shared.BankSoal
@using Microsoft.AspNetCore.Authorization
@using MudExRichTextEditor.Extensibility
@using Web.Client.Feature.BankSoal.Component
@using Web.Client.Interfaces
@using Web.Client.Shared.Extensions
@rendermode InteractiveWebAssembly
@layout SoalLayout
@attribute [Authorize(Roles = "Superuser,Dosen,Operator")]
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isLoading)
{
    <div class="d-none d-flex align-center flex-grow-1 ma-8">
        <MudSpacer/>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        <MudSpacer/>
    </div>
}
else
{
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@model.Nama</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Variant="Variant.Outlined"
                                  T="string"
                                  @bind-Value="@model.Nama"
                                  Immediate
                                  Required
                                  Label="Nama Paket Soal"/>
                    <MudField Variant="Variant.Outlined" Class="mt-3" Label="Pengaturan Soal">
                        <div class="d-flex flex-row flex-grow-1 gap-4">
                            <MudSwitch @bind-Value="@model.IsRandomize"
                                       Label="Acak Soal?" Color="Color.Success"/>
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg">
                                <ActivatorContent>
                                    <MudFab Color="Color.Primary"
                                            StartIcon="@Icons.Material.Filled.Image"
                                            Label="Unggah Pratinjau"/>
                                </ActivatorContent>
                                <SelectedTemplate>
                                    @if (context != null)
                                    {
                                        <MudText>@context.Name</MudText>
                                    }
                                    else
                                    {
                                        <MudText>No File</MudText>
                                    }
                                </SelectedTemplate>
                            </MudFileUpload>
                        </div>
                    </MudField>


                    <MudTextField Variant="Variant.Outlined"
                                  T="int"
                                  Class="mt-4"
                                  Value="model.TotalSoal"
                                  ReadOnly
                                  Label="Total Soal"/>
                    <MudTextField Variant="Variant.Outlined"
                                  T="int"
                                  Class="mt-3"
                                  Value="@model.TotalPoint"
                                  ReadOnly
                                  Label="Total Point"/>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Save"
                               FullWidth="true"
                               Color="Color.Primary"
                               Class="pa-3 py-2 mt-4"
                               OnClick="OnSaveExam">
                        Simpan
                    </MudButton>
                </MudCardContent>
                <MudCardActions >
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="6">

        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-2">
        <MudItem xs="12" md="7">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Soal</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <div id="unique_id_scroll_section" class="ma-0" style="height:200px;overflow: auto;">
                        <MudStack Wrap="Wrap.Wrap" Spacing="4" Row="@true" AlignItems="AlignItems.Start">
                            @{
                                foreach (var item in model.Soals)
                                {
                                    <MudButton Variant="item == currentSoal ? Variant.Filled : Variant.Outlined"
                                               Color="Color.Primary"

                                               OnClick="() => OnSoalClick(item.Id)"
                                               Style="width: 50px; height: 50px;">
                                        @item.Nomor
                                    </MudButton>
                                }
                            }

                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           OnClick="() => AddSoal()"
                                           Size="Size.Large"/>
                        </MudStack>
                    </div>
                </MudCardContent>
                <MudCardActions >
                </MudCardActions>
            </MudCard>
        </MudItem>

        @{
            if (model.Soals != null && model.Soals.Count > 0 && currentSoal != null)
            {
                <MudItem xs="12" md="5">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Pertanyaan Nomor : @currentSoal.Nomor</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnDelete"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudNumericField Label="Bobot Point"
                                             ReadOnly
                                             Max="5"
                                             Min="0"
                                             Class="mt-3 mb-4"
                                             Variant="Variant.Outlined"
                                             Value="@currentSoal.BobotPoint"/>
                            <MudField Label="Lebih Dari Satu Jawaban Benar?" Variant="Variant.Outlined" InnerPadding="false">
                                @{
                                    if (currentSoal.PilihanJawaban.Count(x => x.IsBenar) > 1)
                                        currentSoal.isMultipleJawaban = true;
                                    else
                                        currentSoal.isMultipleJawaban = false;
                                }
                                <MudSwitch T="bool" @bind-Value="@currentSoal.isMultipleJawaban" Color="Color.Success">
                                    @(currentSoal.isMultipleJawaban ? "Ya" : "Tidak")
                                </MudSwitch>
                            </MudField>
                        </MudCardContent>
                        <MudCardActions >
                        </MudCardActions>
                    </MudCard>

                </MudItem>
                <MudItem xs="12" md="7">
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudToolBar>
                        <MudTextField Variant="Variant.Outlined" Label="URL Foto" @bind-Value="imageUrl"></MudTextField>
                        <MudButton OnClick="InsertImage" StartIcon="@Icons.Material.Filled.Send"></MudButton>
                    </MudToolBar>

                    <MudExRichTextEdit @ref="@Editor"
                                       ReadOnly="@_readOnly"
                                       Height="350"
                                       Class="m-2"
                                       @bind-Value="@currentSoal.Pertanyaan"
                                       Placeholder="Buat Pertanyaan">
                        <ToolbarContent>
                            <RichToolBarContent/>
                        </ToolbarContent>
                    </MudExRichTextEdit>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">Jawaban</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @{
                                var i = 0;
                                foreach (var jawaban in currentSoal.PilihanJawaban)
                                {
                                    var urutan = $"Jawaban {alpha[i]}";

                                    <div class="d-flex flex-grow-1 align-content-center gap-2">
                                        <MudNumericField @bind-Value="@jawaban.Point"
                                                         Max="5"
                                                         Min="0"
                                                         Class="flex-grow-0"
                                                         Style="width: 60px;max-width: 60px"
                                                         Label="Point"
                                                         Variant="Variant.Outlined"/>
                                        <MudTextField Label="@urutan"
                                                      Class="flex-grow-1"
                                                      Variant="Variant.Outlined"
                                                      @bind-Value="@jawaban.Jawaban"/>
                                        @{
                                            if (jawaban.Point > 0)
                                                jawaban.IsBenar = true;
                                            if (jawaban.Point == 0)
                                                jawaban.IsBenar = false;
                                        }
                                        <div class="d-flex align-content-center flex-wrap flex-grow-0">
                                            <MudSwitch
                                                @bind-Value="@jawaban.IsBenar"
                                                Color="Color.Success">
                                                @(jawaban.IsBenar ? "Benar" : "Salah")
                                            </MudSwitch>
                                        </div>

                                        <MudIconButton
                                            Icon="@Icons.Material.Filled.Delete"
                                            aria-label="Delete"
                                            OnClick="() => { currentSoal.PilihanJawaban.Remove(jawaban); }"
                                            Color="Color.Error"/>

                                    </div>

                                    i += 1;
                                }
                            }
                            <MudStack Row="true" Spacing="2" Class="mt-3 mx-2">
                                <MudButton OnClick="AddJawaban"
                                           FullWidth="true"
                                           Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           Class="py-2"
                                           StartIcon="@Icons.Material.Filled.Add">
                                    Tambah Jawaban
                                </MudButton>
                                <MudButton OnClick="Add5Jawaban"
                                           FullWidth="false"
                                           Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           Class="py-2"
                                           StartIcon="@Icons.Material.Filled.Add">
                                    5
                                </MudButton>
                            </MudStack>


                        </MudCardContent>
                        <MudCardActions >
                        </MudCardActions>
                    </MudCard>


                </MudItem>
            }
        }
    </MudGrid>
}


@code {

    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IExam examRepo { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public int Id { get; set; }

    bool isLoading = true;
    readonly bool _readOnly = false;
    bool _updateValueOnChange;
    MudExRichTextEdit Editor;
    private string pertanyaan;
    private string curentUser;
    private readonly string[] alpha = { "A", "B", "C", "D", "E", "F", "G" };
    private string imageUrl;

    private IQuillModule[] _modules =
    {
        new QuilImageCompress()
    };

    private Exam model = new()
    {
        Soals = new List<Soal>()
    };

    private int testint;

    private Soal? currentSoal;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
                model.CreatedBy = auth.User.Identity.Name;
            }

            if (Id != null && Id != 0)
            {
                var exam = await examRepo.Get(Id);
                model = exam;
            }

            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        var stream = file.OpenReadStream();
        using (var memstream = new MemoryStream())
        {
            await stream.CopyToAsync(memstream);
            model.Thumbnail = memstream.ToArray();
        }
    }

    private void OnDelete()
    {
        if (currentSoal != null)
        {
            model.Soals.Remove(currentSoal);

            for (var i = 0; i < model.Soals.Count; i++)
            {
                model.Soals[i].Nomor = i + 1;
            }

            currentSoal = model.Soals.FirstOrDefault();
        }

        StateHasChanged();
    }

    private void AddSoal()
    {
        var totalSoal = model.Soals.Count;
        var createdSoal = new Soal
        {
            Id = Guid.NewGuid(),
            Nomor = totalSoal + 1,
            ExamId = model.Id,
            PilihanJawaban = new List<SoalJawaban>()
        };
        currentSoal = createdSoal;
        model.Soals.Add(createdSoal);
        StateHasChanged();
    }

    private void OnSoalClick(Guid Id)
    {
        currentSoal = model.Soals.FirstOrDefault(x => x.Id == Id);
        StateHasChanged();
    }

    private async Task OnSaveExam()
    {
        if (!string.IsNullOrEmpty(model.Nama))
        {
            var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
            var dial = await DialogService.ShowAsync<BluryDialog>("Harap Tunggu...", options);
            if (model.Id == 0)
            {
                var created = await examRepo.Create(model);
                if (created.isSuccess)
                {
                    model = created.Data;
                }

                dial.Close();
                DialogService.ShowMessageBox(
                    "Info",
                    "Soal Berhasil di Simpan",
                    "Ok");
            }
            else
            {
                var edited = await examRepo.Update(model);
                if (edited.Flag)
                {
                    dial.Close();
                    DialogService.ShowMessageBox(
                        "Info",
                        "Soal Berhasil di Update",
                        "Ok");
                }
                else
                {
                    dial.Close();
                    DialogService.ShowMessageBox(
                        "Error",
                        edited.Message,
                        "Ok");
                }
            }
        }
        else
        {
            DialogService.ShowMessageBox(
                "Info",
                "Nama Paket Soal Tidak Boleh Kosong",
                "Ok");
        }
    }

    private void AddJawaban()
    {
        if (currentSoal.PilihanJawaban.Count < 6)
        {
            currentSoal.PilihanJawaban.Add(new SoalJawaban
            {
                Id = Guid.NewGuid(),
                SoalId = currentSoal.Id
            });
        }
        else
        {
            DialogService.ShowMessageBox(
                "Info",
                "Jawaban Melebihi Kapasitas",
                "Ok");
        }

        StateHasChanged();
    }

    private void Add5Jawaban()
    {
        if (currentSoal.PilihanJawaban.Count == 0)
        {
            for (var i = 1; i < 6; i++)
            {
                currentSoal.PilihanJawaban.Add(new SoalJawaban
                {
                    Id = Guid.NewGuid(),
                    SoalId = currentSoal.Id
                });
            }
        }

        StateHasChanged();
    }

    public async void InsertImage()
    {
        if (!string.IsNullOrEmpty(imageUrl))
        {
            await Editor.InsertImage(imageUrl);
        }

        StateHasChanged();
    }

}
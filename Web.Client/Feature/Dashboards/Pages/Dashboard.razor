@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@layout MainLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<h3>Dashboard</h3>
<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">

                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="100%" ChartOptions="options"></MudChart>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string? authMessage;
    private string? surname;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    Random random = new Random();
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Manajerial", Data = new double[] { 77 ,0,0,0,0,0} },
        new ChartSeries() { Name = "Sosio Kultural", Data = new double[] { 33,0,0,0,0,0 } },
        new ChartSeries() { Name = "Wawancara", Data = new double[] { 56 ,0,0,0,0,0} },
    };
    public string[] XAxisLabels = { "Seri 1", "Seri 2", "Seri 3", "Seri 4", "Seri 5", "Seri 6"};

    protected override void OnInitialized()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
    }
    
    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }

}
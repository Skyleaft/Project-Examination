@page "/report/manage"
@inject IDialogService Dialog
@inject IJSRuntime js
@attribute [Authorize(Roles = "Superuser,Dosen,Operator")]
@using CoreLib.Common
@using CoreLib.Report
@using CoreLib.RoomSet
@using Microsoft.AspNetCore.Authorization
@using MiniExcelLibs
@using Web.Client.Interfaces
@implements IAsyncDisposable

<MudText Typo="Typo.h4" Align="Align.Center">Kelola Hasil Ujian</MudText>
<MudPaper Elevation="2" Class="my-2 pa-2">
    <MudGrid>
        <MudItem lg="3" xs="12">
            <MudStack Row="true">
                <MudAutocomplete T="Room" Label="Filter Sesi Ujian"
                                 Variant="Variant.Outlined"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                 Strict="false"
                                 ValueChanged="OnFilter"
                                 Value="selectedRoom"
                                 ToStringFunc="@(e => e == null ? null : $"{e.Nama} - {e.Kode}")"
                                 SearchFunc="SearchFunc"/>
                <MudIconButton Icon="@Icons.Material.Rounded.Clear"
                               Variant="Variant.Text"
                               OnClick="OnFilterReset"/>
            </MudStack>

        </MudItem>
        <MudItem lg="6" xs="12">
            <MudTextField T="string"
                          ValueChanged="@(s => OnSearch(s))"
                          Placeholder="Search"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium">
            </MudTextField>
        </MudItem>
        <MudItem lg="3" xs="12">
            <MudStack Row="true">
                <MudSelect Dense="true" T="int"
                           Label="Export Type"
                           @bind-Value="exportType"
                           Variant="Variant.Outlined">
                    <MudSelectItem Value="0">All Data</MudSelectItem>
                    <MudSelectItem Value="1">Selected</MudSelectItem>
                </MudSelect>
                <MudIconButton Variant="Variant.Text"
                               OnClick="OnExportClick"
                               Class="px-5"
                               Icon="@Icons.Material.Rounded.Download"
                               Color="Color.Primary">
                </MudIconButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudTable ServerData="ServerReload"
          Dense="true" Hover="true" @ref="table" MultiSelection="true"
          Class="mt-2" Height="55vh">
    <ToolBarContent>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="NamaLengkap" T="ExamReport">Nama Lengkap</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="AsalKota" T="ExamReport">Asal</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="NomorTelepon" T="ExamReport">Nomor Telepon</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="NamaRoom" T="ExamReport">Sesi Ujian</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Jadwal" T="ExamReport">Tanggal</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Score" T="ExamReport">Skor</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Nilai" T="ExamReport">Nilai</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="NamaLengkap">@context.NamaLengkap</MudTd>
        <MudTd DataLabel="Asal">@context.AsalKota</MudTd>
        <MudTd DataLabel="Nomor Telepon">@setHideNoTelp(context.NomorTelepon)</MudTd>
        <MudTd DataLabel="Sesi Ujian">@context.NamaRoom</MudTd>
        <MudTd DataLabel="Tanggal">@context.Jadwal.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Skor">@($"{context.Score} / {context.MaxScore}")</MudTd>
        <MudTd DataLabel="Nilai">@context.Nilai</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Data Tidak Ditemukan...</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Inject] IUser _userService { get; set; }
    [Inject] IUserExam _userExamService { get; set; }
    [Inject] IReport _report { get; set; }
    [Inject] IRoom _rooms { get; set; }
    [Inject] ISnackbar _snackbar { get; set; }
    private MudTable<ExamReport> table;
    private IEnumerable<ExamReport> pagedData;
    private IEnumerable<Room> RoomsRef = new List<Room>();
    private int totalItems;
    private string searchString = "";
    int exportType;
    Room selectedRoom;
    private readonly CancellationTokenSource cts = new();

    DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, BackgroundClass = "bg-filter" };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            // RoomsRef = await _rooms.AllRefference(cts.Token);
            // StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        RoomsRef = await _rooms.AllRefference(cts.Token);
        await base.OnInitializedAsync();
    }


    private string setGender(Gender gender)
    {
        return gender == Gender.LakiLaki ? "L" : "P";
    }

    private string setHideNoTelp(string notelp)
    {
        if (string.IsNullOrWhiteSpace(notelp) || notelp.Length < 5)
            return notelp;
        return $"{notelp.Substring(0, 5)}{"*".PadRight(notelp.Length - 5, '*')}";
    }

    private async Task<TableData<ExamReport>> ServerReload(TableState state, CancellationToken ct)
    {
        var req = new FindRequest();
        req.Page = state.Page + 1;
        req.PageSize = state.PageSize;
        req.Search = searchString;
        req.OrderBy = state.SortLabel;
        req.Direction = (int)state.SortDirection;
        if (selectedRoom != null)
            req.Filter = selectedRoom.Nama;
        var data = await _report.Find(req, ct);
        var tabledata = new TableData<ExamReport>
        {
            TotalItems = data.TotalItems,
            Items = data.Items
        };
        return tabledata;
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnExportClick()
    {
        var data = table.FilteredItems;
        if (exportType == 0)
        {
            selectedRoom = null;
            var load = await table.ServerData.Invoke(new TableState
            {
                Page = 0,
                PageSize = 3000,
                SortDirection = SortDirection.None,
                SortLabel = ""
            }, cts.Token);
            data = load.Items.ToList();
        }
        else
        {
            if (data.Count() == 1)
            {
                _snackbar.Add(
                    @<div>
                        <h3>Info ERROR!!</h3>
                        <ul>
                            <li>Data Tabel Kosong</li>
                            <li>Harap isi tabel terlebih dahulu</li>
                        </ul>
                    </div>
                    , Severity.Error);
                return;
            }

            if (table.SelectedItems.Count == 0)
            {
                _snackbar.Add(
                    @<div>
                        <h3>Info!!</h3>
                        <ul>
                            <li>Data Belum Dipilih</li>
                            <li>Harap pilih data yang mau di export</li>
                        </ul>
                    </div>
                    , Severity.Warning);
                return;
            }

            data = table.SelectedItems;
        }

        var filterd = data.Select((x, i) => new
        {
            No = i + 1,
            x.NamaLengkap,
            x.NomorTelepon,
            Jadwal = x.Jadwal.ToString("dd/MM/yyyy"),
            SesiUjian = x.NamaRoom,
            x.Score,
            x.MaxScore,
            x.Nilai
        }).ToList();
        //var excelFile = ExcelService.GenerateExcelWorkbook(filterd);
        using var stream = new MemoryStream();
        await stream.SaveAsAsync(filterd); // MiniExcel extension method
        var excelFile = stream.ToArray();
        js.InvokeVoidAsync("saveAsFile",
            $"hasil_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx",
            Convert.ToBase64String(excelFile)
        );
    }


    private async Task<IEnumerable<Room>> SearchFunc(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return RoomsRef;
        return RoomsRef
            .Where(x => x.Nama
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private void OnFilter(Room obj)
    {
        if (obj != null)
        {
            selectedRoom = obj;
            table.ReloadServerData();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

    private void OnFilterReset()
    {
        selectedRoom = null;
        table.ReloadServerData();
    }

}

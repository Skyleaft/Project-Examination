@using global::Shared.Common
@using global::Shared.RoomSet
@using Web.Client.Interfaces
@inject IDialogService Dialog
<MudCard Style="width: 280px; min-width: 280px">
    <MudCardMedia Image="@strImage" Height="100"/>
    <MudCardContent>
        <MudText Typo="Typo.h6">@data.Nama</MudText>
        <MudText Typo="Typo.body2">Dibuat Oleh : @data.CreatedBy</MudText>
        @{
            if (!string.IsNullOrEmpty(data.LastModifiedBy))
            {
                <MudText Typo="Typo.caption">*Diperbarui Oleh : @data.LastModifiedBy</MudText>
                <MudText Typo="Typo.caption"> Tanggal : @(data.LastModifiedOn.Value.ToString("dd/MM/yyyy"))</MudText>
            }
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OnEdit">Lihat</MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnDelete"></MudIconButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public Room data { get; set; }
    [Parameter] public string strImage { get; set; }
    [Parameter] public EventCallback<int> RefreshData { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IRoom _roomRepo { get; set; }
    
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, BackgroundClass = "bg-filter" };

    private async Task OnEdit()
    {
        var parameters = new DialogParameters<RoomDialog>();
        parameters.Add(x=>x.room,data);
        parameters.Add(x=>x.isEdit,true);
        var form = await Dialog.ShowAsync<RoomDialog>("Ubah Room",parameters, maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
            await RefreshData.InvokeAsync(1);
    }

    private async Task OnDelete()
    {
        var result = await Dialog.ShowMessageBox(
            "Warning",
            $"Yakin Mau Dihapus Data :{data.Nama}",
            yesText: "Delete",cancelText:"Cancel");
        StateHasChanged();
        if (result!=null)
        {
            var res = await _roomRepo.Delete(data.Id);
            if (res.Flag)
            {
                await Dialog.ShowMessageBox(
                    "Info",
                    res.Message,
                    yesText: "Ok");
                await RefreshData.InvokeAsync(1);
                StateHasChanged();
            }
            else
            {
                await Dialog.ShowMessageBox(
                    "Error",
                    res.Message,
                    yesText: "Ok");
            }
                
        }
    }

}
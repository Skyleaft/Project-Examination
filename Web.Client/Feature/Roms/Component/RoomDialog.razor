@using global::Shared.BankSoal
@using global::Shared.Common
@using global::Shared.RoomSet
@using Web.Client.Interfaces
@using Web.Client.Shared.Extensions
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="room" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudPaper Class="pa-4 ma-2 mb-2">
                <MudStack Spacing="4">
                    <MudTextField Label="Nama Ruangan" HelperText="Max. 40 characters"
                                  Variant="Variant.Outlined"
                                  MaxLength="40"
                                  @bind-Value="room.Nama"
                                  For="@(() => room.Nama)"/>
                    <MudStack Row="true">
                        <MudTextField Label="Kode Ruangan" HelperText="Max. 20 characters"
                                      Variant="Variant.Outlined"
                                      MaxLength="20"
                                      @bind-Value="room.Kode"
                                      For="@(() => room.Kode)"/>
                        <MudButton Variant="Variant.Outlined" OnClick="GenerateRandomKode"
                                   Color="Color.Primary"
                                   Class="mt-2 mb-4">
                            Generate
                        </MudButton>
                    </MudStack>

                    <MudSelect Label="Soal" T="int" @bind-Value="room.ExamId" Variant="Variant.Outlined">
                        @{
                        foreach (var item in _exams)
                        {
                        <MudSelectItem T="int" Value="item.Id">@item.Nama</MudSelectItem>
                        }
                        }
                    </MudSelect>
                    <MudNumericField @bind-Value="room.Durasi" Label="Durasi Ujian" Variant="Variant.Outlined" Min="0" Max="600"/>
                    <MudToolBar Class="pa-2">
                        <MudDatePicker Variant="Variant.Outlined"
                                       Label="Jadwal Mulai"
                                       MinDate="DateTime.Now.AddDays(-1)"
                                       MaxDate="DateTime.Now.AddMonths(2)" Class="ml-3" @bind-Date="dateStart"/>
                        <MudDatePicker Variant="Variant.Outlined"
                                       Label="Jadwal Selesai"
                                       MinDate="DateTime.Now.AddDays(-1)"
                                       MaxDate="DateTime.Now.AddMonths(2)" @bind-Date="dateEnd"/>
                    </MudToolBar>
                    <MudToolBar Class="pa-2">
                        <MudTimePicker Variant="Variant.Outlined" Label="Waktu Mulai" AmPm="true" Class="ml-3" @bind-Time="timeStart"/>
                        <MudTimePicker Variant="Variant.Outlined" Label="Waktu Selesai" AmPm="true" @bind-Time="timeEnd"/>
                    </MudToolBar>
                    <MudToolBar>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg">
                            <ActivatorContent>
                                <MudFab Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Image"
                                        Label="Unggah Pratinjau"/>
                            </ActivatorContent>
                            @* <SelectedTemplate> *@
                            @*     @if (context != null) *@
                            @*     { *@
                            @*     <MudText>@context.Name</MudText> *@
                            @*     } *@
                            @*     else *@
                            @*     { *@
                            @*     <MudText>No File</MudText> *@
                            @*     } *@
                            @* </SelectedTemplate> *@
                        </MudFileUpload>
                    </MudToolBar>

                    
                </MudStack>

            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Simpan</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IExam _examRepo { get; set; }
    [Inject] private IRoom _roomRepo { get; set; }
    [Parameter]
    public
        Room room { get; set; } = new Room()
    {
        ExamId = 1
    };

    [Parameter] public bool isEdit { get; set; }

    void Cancel() => MudDialog.Cancel();
    int examid;


    List<Exam> _exams = new List<Exam>();
    DateTime? dateStart = DateTime.Today;
    DateTime? dateEnd = DateTime.Today;

    TimeSpan? timeStart = new TimeSpan(00, 00, 00);
    TimeSpan? timeEnd = new TimeSpan(00, 00, 00);
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
                if (isEdit)
                    room.LastModifiedBy = auth.User.Identity.Name;
                else
                    room.CreatedBy = auth.User.Identity.Name;
            }

            
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await _examRepo.Find(new FindRequest()
        {
            Page = 1,
            PageSize = 200
        }, new CancellationToken());
        _exams = data.Items;
        if (isEdit)
        {
            dateStart = room.JadwalStart;
            dateEnd = room.JadwalEnd;
            timeStart = room.JadwalStart.TimeOfDay;
            timeEnd = room.JadwalEnd.TimeOfDay;
        }
        StateHasChanged();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        room.JadwalStart = dateStart.Value + timeStart.Value;
        room.JadwalEnd = dateEnd.Value + timeEnd.Value;
        var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
        var dial = await DialogService.ShowAsync<BluryDialog>("Registering...", options);

        if (isEdit)
        {
            var edited = await _roomRepo.Update(room);
            if (edited.Flag)
            {
                dial.Close();
                MudDialog.Close(DialogResult.Ok(true));
                DialogService.ShowMessageBox(
                    "Info",
                    edited.Message,
                    yesText: "Ok");
            }
            else
            {
                dial.Close();
                DialogService.ShowMessageBox(
                    "Error",
                    edited.Message,
                    yesText: "Ok");
            }
        }
        else
        {
            var created = await _roomRepo.Create(room);
            if (created.isSuccess)
            {
                dial.Close();
                MudDialog.Close(DialogResult.Ok(true));
                DialogService.ShowMessageBox(
                    "Info",
                    created.Message,
                    yesText: "Ok");
            }
            else
            {
                dial.Close();
                DialogService.ShowMessageBox(
                    "Error",
                    created.Message,
                    yesText: "Ok");
            }
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        var stream = file.OpenReadStream();
        using (var memstream = new MemoryStream())
        {
            await stream.CopyToAsync(memstream);
            room.Thumbnail = memstream.ToArray();
        }
    }

    private void GenerateRandomKode()
    {
        room.Kode = StringExtensions.GenerateRandomString(20);
        StateHasChanged();
    }

}
@inject AuthenticationStateProvider AuthenticationStateProvider
@using CoreLib.BankSoal
@using CoreLib.Common
@using CoreLib.RoomSet
@using Web.Client.Interfaces
@using Web.Client.Shared.Extensions
@implements IAsyncDisposable

<EditForm Model="room" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudPaper Class="pa-4 ma-2 mb-4">
                <MudStack Spacing="4">
                    <MudTextField Label="Nama Ruangan" HelperText="Max. 40 characters"
                                  Variant="Variant.Outlined"
                                  MaxLength="40"
                                  @bind-Value="room.Nama"
                                  For="@(() => room.Nama)"/>
                    <MudStack Row="true">
                        <MudTextField Label="Kode Ruangan" HelperText="Max. 20 characters"
                                      Variant="Variant.Outlined"
                                      MaxLength="20"
                                      @bind-Value="room.Kode"
                                      For="@(() => room.Kode)"/>
                        <MudButton Variant="Variant.Outlined" OnClick="GenerateRandomKode"
                                   Color="Color.Primary"
                                   Class="mt-2 mb-4">
                            Generate
                        </MudButton>
                    </MudStack>

                    <MudAutocomplete Label="Soal" T="Exam"
                                     Variant="Variant.Outlined"
                                     @bind-Value="selectedExam"
                                     SearchFunc="SearchFunc"
                                     Clearable="true"
                                     ToStringFunc="@(e => e == null ? null : $"{e.Nama} - {e.CreatedOn.Value.ToString("dd/MM/yyyy")}")"
                                     ShowProgressIndicator="true"
                                     DropdownSettings="new DropdownSettings {OverflowBehavior=OverflowBehavior.FlipNever}">

                    </MudAutocomplete>

                    <MudStack Row="true" Spacing="2" Class="pa-2">
                        <MudDatePicker Variant="Variant.Outlined"
                                       Label="Jadwal Mulai"
                                       MaxDate="DateTime.UtcNow.AddMonths(6)" Class="ml-3" @bind-Date="dateStart"/>
                        <MudDatePicker Variant="Variant.Outlined"
                                       Label="Jadwal Selesai"
                                       MaxDate="DateTime.UtcNow.AddMonths(6)" @bind-Date="dateEnd"/>
                    </MudStack>
                    <MudStack Row="true" Spacing="2" Class="pa-2">
                        <MudTimePicker Variant="Variant.Outlined" Label="Waktu Mulai" Class="ml-3"
                                       @bind-Time="timeStart"/>
                        <MudTimePicker Variant="Variant.Outlined" Label="Waktu Selesai" @bind-Time="timeEnd"/>
                    </MudStack>
                    <MudNumericField @bind-Value="room.Durasi" Label="Durasi Ujian"
                                     HelperText="Masukan Dalam Satuan Menit"
                                     Variant="Variant.Outlined"
                                     Min="0" Max="600"/>
                    <MudField Label="Bisa Mengulang?" Variant="Variant.Outlined" InnerPadding="false">
                        <MudSwitch @bind-Value="room.IsRepeatable" Color="Color.Success"/>
                    </MudField>
                    @{
                        if (room.IsRepeatable)
                        {
                            <MudNumericField @bind-Value="room.RetryCount" Label="Kesempatan Mengulang"
                                             HelperText="Berapa Kali peserta dapat mengulang?"
                                             Variant="Variant.Outlined"
                                             Min="0" Max="50"/>
                        }
                    }
                    <MudField Label="Munculkan Kunci Jawaban?"
                              HelperText="Munculkan Kunci Jawaban Ketika Sudah Mengerjakan Ujian"
                              Variant="Variant.Outlined"
                              InnerPadding="false">
                        <MudSwitch @bind-Value="room.IsShowKunci" Color="Color.Success"/>
                    </MudField>
                    <div class="d-flex justify-center">
                        <MudImage ObjectFit="ObjectFit.Cover" Height="200" Src="@imagePath" Elevation="25"
                                  Class="rounded-lg mx-4"/>
                    </div>
                    <div class="d-flex align-center mb-5 mt-2">
                        <MudSpacer/>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg, .jpeg">
                            <ActivatorContent>
                                <MudFab Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Image"
                                        Label="Unggah Pratinjau"/>
                            </ActivatorContent>
                        </MudFileUpload>
                        <MudSpacer/>
                    </div>


                </MudStack>

            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudStack Row="true" Spacing="2" Class="ma-2 my-3">
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit"
                           Color="Color.Primary"
                           Class="pa-4"
                           StartIcon="@Icons.Material.Rounded.Save"
                           Variant="Variant.Filled">Simpan
                </MudButton>

            </MudStack>

        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IExam _examRepo { get; set; }
    [Inject] private IRoom _roomRepo { get; set; }
    [Inject] ISnackbar _snackbar { get; set; }

    [Parameter] public Room room { get; set; } = new();

    [Parameter] public bool isEdit { get; set; }

    private readonly CancellationTokenSource cts = new();
    private Exam? selectedExam;

    void Cancel()
    {
        MudDialog.Cancel();
    }

    int examid;

    string imagePath = "/images/room-bg.jpg";

    DateTime? dateStart = DateTime.Today;
    DateTime? dateEnd = DateTime.Today;

    DateOnly dateOnlyStart = DateOnly.FromDateTime(DateTime.Today);
    DateOnly dateOnlyEnd = DateOnly.FromDateTime(DateTime.Today);

    TimeSpan? timeStart = new TimeSpan(00, 00, 00);
    TimeSpan? timeEnd = new TimeSpan(00, 00, 00);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (auth is not null)
        {
            if (isEdit)
                room.LastModifiedBy = auth.User.Identity.Name;
            else
                room.CreatedBy = auth.User.Identity.Name;
        }

        if (isEdit)
        {
            dateStart = room.JadwalStart.ToLocalTime();
            dateEnd = room.JadwalEnd.ToLocalTime();
            dateOnlyStart = DateOnly.FromDateTime(dateStart.Value);
            dateOnlyEnd = DateOnly.FromDateTime(dateEnd.Value);
            timeStart = dateStart.Value.TimeOfDay;
            timeEnd = dateEnd.Value.TimeOfDay;
            selectedExam = await _examRepo.Get(room.ExamId);
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        dateOnlyStart = DateOnly.FromDateTime(dateStart.Value);
        dateOnlyEnd = DateOnly.FromDateTime(dateEnd.Value);
        var startFixed = dateOnlyStart.ToDateTime(new TimeOnly(timeStart.Value.Ticks));
        var endFixed = dateOnlyEnd.ToDateTime(new TimeOnly(timeEnd.Value.Ticks));

        room.JadwalStart = startFixed.ToUniversalTime();
        room.JadwalEnd = endFixed.ToUniversalTime();
        room.ExamId = selectedExam.Id;
        var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
        var dial = await DialogService.ShowAsync<BluryDialog>("Harap Tunggu...", options);

        if (isEdit)
        {
            var edited = await _roomRepo.Update(room);
            if (edited.Flag)
            {
                dial.Close();
                MudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add(
                    @<div>
                        <h3>Info!!</h3>
                        <ul>
                            <li>Success</li>
                            <li>@edited.Message</li>
                        </ul>
                    </div>
                    , Severity.Success);
            }
            else
            {
                dial.Close();
                DialogService.ShowMessageBox(
                    "Error",
                    edited.Message,
                    "Ok");
            }
        }
        else
        {
            var created = await _roomRepo.Create(room);
            if (created.isSuccess)
            {
                dial.Close();
                MudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add(
                    @<div>
                        <h3>Info!!</h3>
                        <ul>
                            <li>Success</li>
                            <li>@created.Message</li>
                        </ul>
                    </div>
                    , Severity.Success);
            }
            else
            {
                dial.Close();
                DialogService.ShowMessageBox(
                    "Error",
                    created.Message,
                    "Ok");
            }
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        var stream = file.OpenReadStream();
        using (var memstream = new MemoryStream())
        {
            await stream.CopyToAsync(memstream);
            room.Thumbnail = memstream.ToArray();
            imagePath = $"data:image;base64,{Convert.ToBase64String(room.Thumbnail)}";
        }
    }

    private void GenerateRandomKode()
    {
        room.Kode = StringExtensions.GenerateRandomString(20);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

    private async Task<IEnumerable<Exam>>? SearchFunc(string? value, CancellationToken ct)
    {
        var data = await _examRepo.Find(new FindRequest
        {
            Page = 1,
            Search = value,
            PageSize = 100
        }, ct);
        return data.Items;
    }

}

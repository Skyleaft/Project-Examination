@using CoreLib.RoomSet
@using CoreLib.TakeExam
@using Web.Client.Interfaces
@inject IDialogService Dialog
<MudCard>
    <MudCardMedia Image="@strImage" Height="100"/>
    <MudCardHeader Class="mb-n7">
        <MudText Typo="Typo.h6">@data.Nama</MudText>
        <MudSpacer/>
        @{
            if (isWaitActiveState)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Circle"
                         Color="data.IsActive ? Color.Success : Color.Error"/>
            }
        }

    </MudCardHeader>
    <MudCardContent>
        <MudPaper MaxWidth="330px" Elevation="0">
            <MudDivider DividerType="DividerType.Middle" Class="mb-2"></MudDivider>
            <MudText Typo="Typo.body2">Kode Ruangan :<b>@data.Kode</b></MudText>
            <MudStack Row="true" Spacing="2">
                <MudText Typo="Typo.body2">Mulai
                    : @data.JadwalStart.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
                <MudText Typo="Typo.body2">Selesai
                    : @data.JadwalEnd.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
            </MudStack>
            <MudText Typo="Typo.body2"> Jumlah Peserta :@_totalPeserta</MudText>
        </MudPaper>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OnLihatClick">Lihat</MudButton>
        <MudSpacer/>
        @{
            if (isWaitActiveState)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
            }
            else
            {
                if (data.IsActive)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="OnDeactive">Non-Aktifkan
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnActivate">Aktifkan</MudButton>
                }
            }
        }


    </MudCardActions>
</MudCard>

@code {
    [Parameter] public Room data { get; set; }
    [Parameter] public IEnumerable<UserExam?> userExamData { get; set; }
    [Parameter] public string strImage { get; set; }
    [Parameter] public int? _totalPeserta { get; set; }
    [Parameter] public EventCallback<int> RefreshData { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IRoom _roomRepo { get; set; }
    private bool isWaitActiveState;


    DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Large, BackgroundClass = "bg-filter" };

    private async Task OnActivate()
    {
        isWaitActiveState = true;
        data.IsActive = true;
        await Task.Delay(300);
        var status = await _roomRepo.Update(data);
        isWaitActiveState = false;
        StateHasChanged();
    }

    private async Task OnDeactive()
    {
        isWaitActiveState = true;
        data.IsActive = false;
        await Task.Delay(300);
        var status = await _roomRepo.Update(data);
        isWaitActiveState = false;
        StateHasChanged();
    }


    private async Task OnLihatClick()
    {
        var parameters = new DialogParameters<RoomViewDialog>();
        parameters.Add(x => x.room, data);
        parameters.Add(x => x.UserExamsData, userExamData);
        parameters.Add(x => x.isEdit, true);
        parameters.Add(x=>x.RefreshData,RefreshData);
        var form = await Dialog.ShowAsync<RoomViewDialog>("Detail Ruangan", parameters, maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
        {
            await RefreshData.InvokeAsync(1);
        }
    }

}
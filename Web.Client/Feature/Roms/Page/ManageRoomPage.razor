@page "/room/manage"
@implements IBrowserViewportObserver
@using global::Shared.Common
@using global::Shared.RoomSet
@using Microsoft.AspNetCore.Authorization
@using Web.Client.Feature.Roms.Component
@using Web.Client.Interfaces
@implements IAsyncDisposable
@inject IDialogService Dialog
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Superuser,Dosen,Operator")]

<MudPaper Class="pa-8">
    <div class="d-none d-flex align-center flex-grow-1 mr-2 mb-6">

        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudSpacer/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudSpacer/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudSpacer/>
        </MudHidden>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mr-3 py-3"
                   OnClick="AddRoomDialog"
                   StartIcon="@Icons.Material.Filled.Add">
            Buat Baru
        </MudButton>
        <MudTextField Label="Cari Ruangan"
                      @bind-Value="request.Search"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"/>
    </div>
    <MudPaper Class="d-flex flex-wrap justify-xs-center justify-md-start gap-4" Elevation="0">
        @{
            if (isLoading)
            {
                <div class="d-none d-flex align-center flex-grow-1 ma-8">
                    <MudSpacer/>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    <MudSpacer/>
                </div>
            }
            else
            {
                foreach (var item in dataRoom.Items)
                {
                    var strImage = "/images/room-bg.jpg";
                    if (item.Thumbnail != null)
                    {
                        strImage = $"data:image;base64,{Convert.ToBase64String(item.Thumbnail)}";
                    }

                    <RoomCard data="@item" strImage="@strImage" RefreshData="@PageChanged"/>
                }
            }
        }
    </MudPaper>
    <div class="d-none d-flex align-center flex-grow-1 mt-8">
        <MudSpacer/>
        <MudPagination Color="Color.Primary" Count="@dataRoom.TotalPage" SelectedChanged="PageChanged"/>
        <MudSpacer/>
    </div>

</MudPaper>

@code {
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IRoom _repo { get; set; }
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }

    readonly DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, BackgroundClass = "bg-filter" };


    string search;
    private Breakpoint curentBreak;
    private bool isLoading = true;

    private readonly FindRequest request = new()
    {
        Page = 1,
        PageSize = 15
    };

    PaginatedResponse<Room> dataRoom = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this);
            dataRoom = await _repo.Find(request, new CancellationToken());
            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
    }

    private void manageSoal(MouseEventArgs obj)
    {
    }

    private async Task PageChanged(int page)
    {
        isLoading = true;
        request.Page = page;
        dataRoom = await _repo.Find(request, new CancellationToken());
        await Task.Delay(400);
        isLoading = false;
    }

    private async Task AddRoomDialog()
    {
        var form = await Dialog.ShowAsync<RoomDialog>("Buat Room", maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
        {
            await Task.Delay(400);
            await PageChanged(1);
        }
            
    }

    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);
    }

    public Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            curentBreak = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            curentBreak = browserViewportEventArgs.Breakpoint;
        }

        if (curentBreak == Breakpoint.Lg)
        {
            request.PageSize = 15;
        }
        else if (curentBreak == Breakpoint.Md)
        {
            request.PageSize = 12;
        }
        else if (curentBreak == Breakpoint.Xs)
        {
            request.PageSize = 10;
        }

        return InvokeAsync(StateHasChanged);
    }

    public Guid Id { get; }
}
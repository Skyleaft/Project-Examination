@using System.Security.Claims
@using global::Shared.RoomSet
@using global::Shared.TakeExam
@using Web.Client.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4 ma-2 mb-2">
            <MudStack Spacing="4">
                <MudStack Row="true">
                    <MudTextField Variant="Variant.Outlined"
                                  MaxLength="40"
                                  Label="Masukan Kode Ruangan"
                                  @bind-Value="kodeRoom">
                    </MudTextField>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               OnClick="OnSearchRoom">
                        Cari
                    </MudButton>
                </MudStack>
                @{
                    if (isLoading)
                    {
                        <div class="d-none d-flex align-center flex-grow-1 ma-8">
                            <MudSpacer/>
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            <MudSpacer/>
                        </div>
                    }
                    else
                    {
                        if (room != null)
                        {
                            <MudTextField Label="Nama Ruangan"
                                          Variant="Variant.Outlined"
                                          ReadOnly
                                          MaxLength="40"
                                          @bind-Value="room.Nama"
                                          For="@(() => room.Nama)"/>
                            <MudNumericField @bind-Value="room.Durasi"
                                             Label="Durasi Ujian" ReadOnly
                                             Variant="Variant.Outlined"
                                             Min="0" Max="600"/>
                        }
                    }
                }
            </MudStack>

        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="CreateUserExam" Class="pa-2 ma-2">Daftar Ujian</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IUserExam _userExam { get; set; }
    [Inject] private IRoom _roomRepo { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] ISnackbar _snackbar { get; set; }
    
    private CancellationTokenSource cts = new CancellationTokenSource();

    private Room room;

    private string kodeRoom;
    private bool isLoading;

    void Cancel()
    {
        MudDialog.Cancel();
    }

    int examid;
    private string userId;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
                userId = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            }

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }


    private async Task CreateUserExam()
    {
        if (room != null)
        {
            var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
            var dial = await DialogService.ShowAsync<BluryDialog>("Registering...", options);

            var listSoal = new List<UserAnswer>();
            foreach (var soal in room.Exam.Soals)
            {
                listSoal.Add(new UserAnswer
                {
                    SoalId = soal.Id
                });
            }

            var data = new CreateUserExamDTO
            {
                RoomId = room.Id,
                UserId = userId,
                TimeLeft = TimeSpan.FromMinutes(room.Durasi),
                UserAnswers = listSoal,
                StartDate = null,
                EndDate = null
            };

            var created = await _userExam.Create(data,cts.Token);
            await Task.Delay(400);
            if (created.isSuccess)
            {
                dial.Close();
                
                MudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add(
                    @<div>
                        <h3>Info!!</h3>
                        <ul>
                            <li>Success</li>
                            <li>Anda telah terdaftar sebagai peserta Ujian</li>
                        </ul>
                    </div>
                    , Severity.Success);
            }
            else
            {
                dial.Close();
                MudDialog.Close(DialogResult.Ok(true));
                DialogService.ShowMessageBox(
                    "Error",
                    created.Message,
                    "Ok");
            }

            StateHasChanged();
        }
    }

    private async Task OnSearchRoom()
    {
        isLoading = true;
        if (!string.IsNullOrEmpty(kodeRoom))
        {
            room = await _roomRepo.Get(kodeRoom);
            await Task.Delay(400,cts.Token);
            if (room == null)
            {
                DialogService.ShowMessageBox(
                    "Info",
                    "Kode Ruangan Tidak Ditemukan!",
                    "Ok");
            }
        }

        isLoading = false;
        StateHasChanged();
    }
    
    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

}

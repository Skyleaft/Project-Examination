@using global::CoreLib.BankSoal
@using global::CoreLib.RoomSet
@using global::CoreLib.TakeExam
@using Web.Client.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4 ma-2 mb-2">
            <MudStack Spacing="4">
                <MudTextField Label="Nama Ruangan"
                              Variant="Variant.Outlined"
                              ReadOnly
                              MaxLength="40"
                              @bind-Value="room.Nama"
                              For="@(() => room.Nama)"/>

                <MudNumericField @bind-Value="room.Durasi"
                                 Label="Durasi Ujian" ReadOnly
                                 Variant="Variant.Outlined"
                                 Min="0" Max="600"/>
                <MudToolBar Class="pa-2">
                    <MudDatePicker Variant="Variant.Outlined"
                                   Label="Jadwal Mulai"
                                   ReadOnly
                                   MinDate="DateTime.Now.AddDays(-1)"
                                   MaxDate="DateTime.Now.AddMonths(2)" Class="ml-3" @bind-Date="dateStart"/>
                    <MudDatePicker Variant="Variant.Outlined"
                                   Label="Jadwal Selesai"
                                   ReadOnly
                                   MinDate="DateTime.Now.AddDays(-1)"
                                   MaxDate="DateTime.Now.AddMonths(2)" @bind-Date="dateEnd"/>
                </MudToolBar>
                <MudToolBar Class="pa-2">
                    <MudTimePicker Variant="Variant.Outlined"
                                   Label="Waktu Mulai"
                                   ReadOnly
                                   Class="ml-3" @bind-Time="timeStart"/>
                    <MudTimePicker Variant="Variant.Outlined"
                                   Label="Waktu Selesai"
                                   ReadOnly
                                   @bind-Time="timeEnd"/>
                </MudToolBar>
                @{
                    if (room.IsRepeatable && room.JadwalEnd.ToLocalTime() > DateTime.Now.ToLocalTime())
                    {
                        <MudText Align="Align.Center" Typo="Typo.h6">Kesempatan Mengulang : @userExam.RetryCount X</MudText>
                        if (!userExam.IsOngoing && userExam.IsDone)
                        {
                            <MudButton FullWidth Variant="Variant.Filled" 
                                       OnClick="UlangUjianClick" 
                                       Color="Color.Primary" 
                                       StartIcon="@Icons.Material.Rounded.Refresh">Mengulang Ujian</MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">Jika Anda Sudah Mengerjakan Sekali Anda Dapat Mengulang Ujian Tersebut</MudText>
                        }
                        
                    }
                }

            </MudStack>

        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="NavToRoom" Variant="Variant.Outlined">Masuk Ke Ruangan</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IUserExam _userExamRepo { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] ISnackbar _snackbar { get; set; }
    
    private CancellationTokenSource cts = new CancellationTokenSource();

    [Parameter]
    public
        UserExam userExam { get; set; } = new();

    [Parameter]
    public
        Room room { get; set; } = new();

    void Cancel()
    {
        MudDialog.Cancel();
    }

    int examid;


    List<Exam> _exams = new();
    DateTime? dateStart = DateTime.Today;
    DateTime? dateEnd = DateTime.Today;

    TimeSpan? timeStart = new TimeSpan(00, 00, 00);
    TimeSpan? timeEnd = new TimeSpan(00, 00, 00);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
            }
            dateStart = room.JadwalStart.ToLocalTime();
            dateEnd = room.JadwalEnd.ToLocalTime();
            timeStart = room.JadwalStart.ToLocalTime().TimeOfDay;
            timeEnd = room.JadwalEnd.ToLocalTime().TimeOfDay;

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        

    }


    private void NavToRoom()
    {
        if (userExam.IsDone)
        {
            _navigationManager.NavigateTo($"exam/examresult/{userExam.Id}", true);
        }
        else if (userExam.IsOngoing)
        {
            _navigationManager.NavigateTo($"exam/userexam/{userExam.Id}", true);
        }
        else
        {
            _navigationManager.NavigateTo($"exam/exambefore/{userExam.Id}", true);
        }
        
    }

    private async Task UlangUjianClick()
    {
        if (userExam.RetryCount == 0)
        {
            _snackbar.Add(
                @<div>
                    <h3>Info!!</h3>
                    <ul>
                        <li>Gagal</li>
                        <li>Percobaan Mengulang anda Sudah Habis</li>
                    </ul>
                </div>
                , Severity.Error);
            return;
        }
        
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Yakin Mau Mengulang Ujian?, semua jawaban akan terhapus!",
            "Ya", cancelText: "Tidak");
        StateHasChanged();
        if (result != null)
        {
            userExam.RetryCount -= 1;
            userExam.IsDone = false;
            userExam.IsOngoing = false;
        
            var res = await _userExamRepo.RetryExam(userExam.Id, cts.Token);
            if (res.Flag)
            {
                NavToRoom();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

}
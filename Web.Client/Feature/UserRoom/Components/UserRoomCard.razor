@using System.Diagnostics.CodeAnalysis
@using global::CoreLib.RoomSet
@using global::CoreLib.TakeExam
@using Web.Client.Interfaces
@inject IDialogService Dialog
@implements IAsyncDisposable

@{
    if (data.Room == null)
    {
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Width="300px"/>
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px"/>
                <MudSkeleton Width="80%"/>
                <MudSkeleton Width="100%"/>
            </MudCardContent>
            <MudCardActions>
                <MudSpacer/>
                <MudSkeleton Width="105px" Height="40px" Class="ml-3"/>
            </MudCardActions>
        </MudCard>
    }
    else
    {
        <MudCard>
            <MudCardMedia Image="@strImage" Height="100"/>
            <MudCardHeader Class="mb-n7">
                <MudText Typo="Typo.h6">@data.Room.Nama</MudText>
                <MudSpacer/>
            </MudCardHeader>
            <MudCardContent>
                <MudPaper MaxWidth="300px" Elevation="0">
                    <MudDivider DividerType="DividerType.Middle" Class="mb-2"></MudDivider>
                    <MudText Typo="Typo.body2">Kode Ruangan :<b>@data.Room.Kode</b></MudText>
                    <MudStack Row="true" Spacing="2">
                        <MudText Typo="Typo.body2">Mulai : @data.Room.JadwalStart.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
                        <MudText Typo="Typo.body2">Selesai : @data.Room.JadwalEnd.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
                    </MudStack>
                </MudPaper>


            </MudCardContent>
            <MudCardActions>
                <MudSpacer/>
                @{
                    if (!data.Room.IsActive)
                    {
                        <MudText Typo="Typo.body2">Ujian Belum Dibuka</MudText>
                    }
                    else if (data.Room.JadwalStart.ToLocalTime() > DateTime.Now.ToLocalTime())
                    {
                        <MudText Typo="Typo.body2">Ujian Belum Dimulai</MudText>
                    }
                    @* else if (data.Room.JadwalEnd.ToLocalTime() < DateTime.Now.ToLocalTime()) *@
                    @* { *@
                    @*     <MudText Typo="Typo.body2">Ujian Telah Berakhir</MudText> *@
                    @* } *@
                    else
                    {
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OnLihat">Lihat</MudButton>
                    }
                }


            </MudCardActions>
        </MudCard>
    }
}


@code {
    [Parameter] public UserExam data { get; set; }
    [Parameter] public EventCallback<int> RefreshData { get; set; }

    [Inject] NavigationManager _navigationManager { get; set; }

    private CancellationTokenSource cts = new CancellationTokenSource();
    
    private string strImage = "/images/room-bg.jpg";
    DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, BackgroundClass = "bg-filter" };

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (data.Room.Thumbnail != null)
            {
                strImage = $"data:image;base64,{Convert.ToBase64String(data.Room.Thumbnail)}";
            }
            

            StateHasChanged();
        }
    }


    private async Task OnLihat()
    {
        var parameters = new DialogParameters<UserRoomDialog>();
        parameters.Add(x => x.userExam, data);
        parameters.Add(x => x.room, data.Room);
        var form = await Dialog.ShowAsync<UserRoomDialog>("Detail Ruangan", parameters, maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
            await RefreshData.InvokeAsync(1);
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

}
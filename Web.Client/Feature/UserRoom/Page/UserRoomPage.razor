@page "/userroom"
@using global::Shared.BankSoal
@using global::Shared.Common
@using global::Shared.RoomSet
@using global::Shared.TakeExam
@using Microsoft.AspNetCore.Authorization
@using MudBlazor.Extensions.Core
@using Web.Client.Interfaces
@using Web.Client.Feature.UserRoom.Components
@attribute [Authorize]
@implements IBrowserViewportObserver
@implements IAsyncDisposable
@inject IDialogService Dialog
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper Class="pa-8">
    <div class="d-none d-flex align-center flex-grow-1 mr-2 mb-6">
        <MudText Typo="Typo.h3">Kelas Ujian yang Diikuti</MudText>

        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudSpacer/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudSpacer/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudSpacer/>
        </MudHidden>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="()=>PageChanged(1)"></MudIconButton>
        <MudButton StartIcon="@Icons.Material.Filled.Search" 
                   Class="pa-4"
                   OnClick="OnSearchRoom"
                   Color="Color.Primary">
            Cari Ruangan Ujian
        </MudButton>
    </div>
    <MudPaper Class="d-flex flex-wrap justify-xs-center justify-md-start gap-4" Height="400px" Elevation="0">
        @{
            if (isLoading)
            {
                <div class="d-none d-flex align-center flex-grow-1 ma-8">
                    <MudSpacer/>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    <MudSpacer/>
                </div>
            }
            else
            {
                foreach (var item in data.Items)
                {
                    <UserRoomCard data="@item" RefreshData="@PageChanged"/>
                }
            }
        }
    </MudPaper>
    <div class="d-none d-flex align-center flex-grow-1 mt-8">
        <MudSpacer/>
        <MudPagination Color="Color.Primary" Count="@data.TotalPage" SelectedChanged="PageChanged"/>
        <MudSpacer/>
    </div>

</MudPaper>

@code {
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IUserExam _repo { get; set; }
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }

    string search;
    private Breakpoint curentBreak;
    private bool isLoading = true;

    private FindRequest request = new FindRequest()
    {
        Page = 1,
        PageSize = 15
    };

    PaginatedResponse<UserExam> data = new PaginatedResponse<UserExam>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
            data = await _repo.Find(request, new CancellationToken());
            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
    }
    

    private async Task PageChanged(int page)
    {
        isLoading = true;
        request.Page = page;
        data = await _repo.Find(request, new CancellationToken());
        isLoading = false;
        StateHasChanged();
    }


    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    public Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            curentBreak = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            curentBreak = browserViewportEventArgs.Breakpoint;
        }

        if (curentBreak == Breakpoint.Lg)
        {
            request.PageSize = 15;
        }
        else if (curentBreak == Breakpoint.Md)
        {
            request.PageSize = 12;
        }
        else if (curentBreak == Breakpoint.Xs)
        {
            request.PageSize = 10;
        }

        return InvokeAsync(StateHasChanged);
    }

    public Guid Id { get; }
    
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, BackgroundClass = "bg-filter" };

    private async Task OnSearchRoom()
    {
        var form = await Dialog.ShowAsync<UserRoomSearchDialog>("Cari Ruangan", maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
            await PageChanged(1);
    }

}
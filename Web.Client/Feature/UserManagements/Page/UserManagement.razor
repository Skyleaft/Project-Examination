@page "/UserManagement"
@using CoreLib.Common
@using CoreLib.Users
@using Mapster
@using Microsoft.AspNetCore.Authorization
@using MiniExcelLibs
@using Web.Client.Feature.UserManagements.Dialog
@using Web.Client.Interfaces
@using Web.Client.Services
@inject IDialogService Dialog
@inject IJSRuntime js
@attribute [Authorize(Roles = "Superuser,Operator")]

<MudText Typo="Typo.h4" Align="Align.Center">Kelola User</MudText>
<MudPaper Elevation="2" Class="my-2 pa-2">
    <MudGrid>
        <MudItem lg="3" xs="12">
            <MudStack>
                <MudButton OnClick="@(e => OpenDialog())"
                           Variant="Variant.Outlined"
                           FullWidth="true"
                           Class="py-4"
                           StartIcon="@Icons.Material.Outlined.PersonAdd"
                           Color="Color.Primary">
                    Tambah
                </MudButton>
            </MudStack>

        </MudItem>
        <MudItem lg="6" xs="12">
            <MudTextField T="string"
                          ValueChanged="@(s => OnSearch(s))"
                          Placeholder="Search"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium">
            </MudTextField>
        </MudItem>
        <MudItem lg="3" xs="12">
            <MudStack Row="true">
                <MudSelect Dense="true" T="int"
                           Label="Export Type"
                           @bind-Value="exportType"
                           Variant="Variant.Outlined">
                    <MudSelectItem Value="0">Current Page</MudSelectItem>
                    <MudSelectItem Value="1">All Data</MudSelectItem>
                    <MudSelectItem Value="2">Selected</MudSelectItem>
                </MudSelect>
                <MudIconButton Variant="Variant.Text"
                               OnClick="OnExportClick"
                               Class="px-5"
                               Icon="@Icons.Material.Rounded.Download"
                               Color="Color.Primary">
                </MudIconButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudTable ServerData="ServerReload"
          Dense="true" Hover="true" @ref="table" MultiSelection="true">
    <ToolBarContent>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="NamaLengkap" T="ApplicationUser">Nama Lengkap</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Gender" T="ApplicationUser">Gender</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="UserName" T="ApplicationUser">UserName</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Pekerjaan" T="ApplicationUser">Pekerjaan</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Kota.Provinsi.NamaProvinsi" T="ApplicationUser">Asal Kota</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Email" T="ApplicationUser">Email</MudTableSortLabel>
        </MudTh>
        <MudTh>
            Action
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="NamaLengkap">@context.NamaLengkap</MudTd>
        <MudTd DataLabel="Jenis Kelamin">@setGender(context.Gender)</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Pekerjaan">@context.Pekerjaan</MudTd>
        <MudTd DataLabel="Asal Kota">@context.Kota.NamaKota - @context.Kota.Provinsi.NamaProvinsi</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Action">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete"
                           OnClick="() => OnDelete(context)"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit"
                           OnClick="() => OnEdit(context)"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Inject] IUser _userService { get; set; }
    [Inject] ISnackbar _snackbar { get; set; }
    private IEnumerable<ApplicationUser> pagedData;
    private MudTable<ApplicationUser> table;
    private CancellationTokenSource cts = new();

    private int totalItems;
    private string searchString = "";
    int exportType;

    readonly DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, BackgroundClass = "bg-filter" };


    private string setGender(Gender gender)
    {
        return gender == Gender.LakiLaki ? "Laki - Laki" : "Perempuan";
    }

    private async Task OpenDialog()
    {
        var form = await Dialog.ShowAsync<AddUserDialog>("Tambah User", maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }


    private async Task<TableData<ApplicationUser>> ServerReload(TableState state, CancellationToken ct)
    {
        var req = new FindRequest();
        req.Page = state.Page + 1;
        req.PageSize = state.PageSize;
        req.Search = searchString;
        req.OrderBy = state.SortLabel;
        req.Direction = (int)state.SortDirection;
        var data = await _userService.Find(req, ct);
        await Task.Delay(100, ct);
        totalItems = data.TotalItems;
        pagedData = data.Items;
        return new TableData<ApplicationUser> { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnDelete(ApplicationUser data)
    {
        var result = await Dialog.ShowMessageBox(
            "Warning",
            $"Yakin Mau Dihapus UserName :{data.UserName}",
            "Delete", cancelText: "Cancel");
        StateHasChanged();
        if (result != null)
        {
            var res = await _userService.Delete(data.Id, new CancellationToken());
            if (res.Flag)
            {
                await Dialog.ShowMessageBox(
                    "Info",
                    res.Message,
                    "Ok");
                await table.ReloadServerData();
            }
            else
            {
                await Dialog.ShowMessageBox(
                    "Error",
                    res.Message,
                    "Ok");
            }
        }
    }

    private async Task OnEdit(ApplicationUser data)
    {
        var userDTO = await _userService.Get(data.Id);
        var edit = userDTO.Adapt<UserEditDTO>();
        var parameters = new DialogParameters<EditUserDialog> { { x => x.userModel, edit } };
        var form = await Dialog.ShowAsync<EditUserDialog>("Edit User", parameters, maxWidth);
        var result = await form.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task OnExportClick()
    {
        var data = table.FilteredItems;
        if (exportType == 0)
        {
            if (data.Count() == 0)
            {
                _snackbar.Add(
                    @<div>
                        <h3>Info ERROR!!</h3>
                        <ul>
                            <li>Data Tabel Kosong</li>
                            <li>Harap isi tabel terlebih dahulu</li>
                        </ul>
                    </div>
                    , Severity.Error);
                return;
            }

            data = table.FilteredItems;
        }
        else if (exportType == 1)
        {
            var load = await table.ServerData.Invoke(new TableState
            {
                Page = 0,
                PageSize = 3000,
                SortDirection = SortDirection.None,
                SortLabel = ""
            }, new CancellationToken());
            data = load.Items.ToList();
        }
        else
        {
            if (data.Count() == 0)
            {
                _snackbar.Add(
                    @<div>
                        <h3>Info ERROR!!</h3>
                        <ul>
                            <li>Data Tabel Kosong</li>
                            <li>Harap isi tabel terlebih dahulu</li>
                        </ul>
                    </div>
                    , Severity.Error);
                return;
            }

            if (table.SelectedItems.Count == 0)
            {
                _snackbar.Add(
                    @<div>
                        <h3>Info!!</h3>
                        <ul>
                            <li>Data Belum Dipilih</li>
                            <li>Harap pilih data yang mau di export</li>
                        </ul>
                    </div>
                    , Severity.Warning);
                return;
            }

            data = table.SelectedItems;
        }

        var filterd = data.Select((x, i) => new
        {
            No = i + 1,
            x.NamaLengkap,
            x.UserName,
            x.Gender,
            x.Pekerjaan,
            x.Kota.NamaKota,
            x.Kota.Provinsi.NamaProvinsi,
            x.Email,
            x.PhoneNumber
        }).ToList();
        using var stream = new MemoryStream();
        await stream.SaveAsAsync(filterd); // MiniExcel extension method
        var excelFile = stream.ToArray();
        js.InvokeVoidAsync("saveAsFile",
            $"user_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx",
            Convert.ToBase64String(excelFile)
        );
    }

}
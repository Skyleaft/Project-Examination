@using global::Shared.Common
@using global::Shared.Users
@using Web.Client.Interfaces
<EditForm Model="@userModel" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>

            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Profile User</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudTextField Label="Nama Lengkap" HelperText="Max. 40 characters"
                                              Variant="Variant.Outlined"
                                              MaxLength="40"
                                              @bind-Value="userModel.NamaLengkap"
                                              For="@(() => userModel.NamaLengkap)"/>
                                <MudField Label="Jenis Kelamin" Variant="Variant.Outlined" InnerPadding="false">
                                    <MudRadioGroup T="int" ValueChanged="i => userModel.Gender = (Gender)i">
                                        <MudRadio Value="1"
                                                  Color="Color.Primary">
                                            Perempuan
                                        </MudRadio>
                                        <MudRadio Value="0"
                                                  Color="Color.Primary">
                                            Laki - Laki
                                        </MudRadio>

                                    </MudRadioGroup>
                                </MudField>
                                <MudSelect T="string" Label="Pekerjaan"
                                           @bind-Value="userModel.Pekerjaan"
                                           Variant="Variant.Outlined"
                                           AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem T="string" Value="@("Dosen")">Dosen</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Mahasiswa")">Mahasiswa</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Alumni")">Alumni</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Umum")">Umum</MudSelectItem>
                                </MudSelect>
                                <MudTextField Label="Nomor Telepon" HelperText="Max. 15 characters"
                                              Variant="Variant.Outlined"
                                              MaxLength="15"
                                              InputType="InputType.Number"
                                              @bind-Value="userModel.PhoneNumber"
                                              For="@(() => userModel.PhoneNumber)"/>
                                <MudAutocomplete T="Provinsi" Label="Provinsi"
                                                 Variant="Variant.Outlined"
                                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                                 Strict="false"
                                                 Value="SelectedProv"
                                                 ValueChanged="(Provinsi selected) => { SelectedProv = selected; FilterKota(SelectedProv.Id); SelectedKota = null; }"
                                                 ToStringFunc="@(e => e == null ? null : $"{e.NamaProvinsi}")"
                                                 SearchFunc="@SearchProv"/>
                                @{
                                    if (SelectedProv != null)
                                    {
                                        FilterKota(SelectedProv.Id);
                                        <MudAutocomplete T="Kota" Label="Kota"
                                                         Variant="Variant.Outlined"
                                                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                                         Strict="false"
                                                         Value="SelectedKota"
                                                         ValueChanged="kota => { SelectedKota = kota; userModel.KotaId = kota.Id; }"
                                                         ToStringFunc="@(e => e == null ? null : $"{e.NamaKota}")"
                                                         SearchFunc="@SearchKota"/>
                                    }
                                }
                            </MudStack>


                        </MudCardContent>
                    </MudCard>

                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Akun Login</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <div class="d-flex justify-center">
                                    <MudImage ObjectFit="ObjectFit.Cover" Height="150" Src="@imagePath"  Elevation="25" Class="rounded-lg mx-4"/>
                                </div>
                                <div class="d-flex align-center mb-5 mt-2">
                                    <MudSpacer/>
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg, .jpeg">
                                        <ActivatorContent>
                                            <MudFab Color="Color.Primary"
                                                    StartIcon="@Icons.Material.Filled.Image"
                                                    Label="Unggah Foto"/>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                    <MudSpacer/>
                                </div>
                                <MudSelect T="string" Label="Role"
                                           @bind-Value="userModel.Role"
                                           Variant="Variant.Outlined"
                                           AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem T="string" Value="@("Operator")">Operator</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Dosen")">Dosen</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("User")">User</MudSelectItem>
                                </MudSelect>

                                <MudTextField Label="Email"
                                              Variant="Variant.Outlined"
                                              @bind-Value="userModel.Email"
                                              For="@(() => userModel.Email)"/>
                                <MudTextField Label="Username"
                                              Variant="Variant.Outlined"
                                              ReadOnly
                                              @bind-Value="userModel.UserName"
                                              For="@(() => userModel.UserName)"/>
                            </MudStack>

                        </MudCardContent>
                    </MudCard>
                </MudItem>


            </MudGrid>


        </DialogContent>
        <DialogActions>
            <MudStack Row="true" Spacing="2" Class="ma-2 my-3">
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit"
                           Color="Color.Primary"
                           Class="pa-4"
                           StartIcon="@Icons.Material.Rounded.Save"
                           Variant="Variant.Filled">Simpan</MudButton>

            </MudStack>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] IUser _userService { get; set; }
    [Inject] IReferences _reference { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] HttpClient _httpClient { get; set; }
    [Parameter] public UserEditDTO userModel { get; set; } = new();
    string imagePath = "/images/userdef.png";

    Provinsi SelectedProv;
    Kota SelectedKota;
    List<Provinsi> dataProv = new();
    List<Kota> dataKota = new();
    List<Kota> filterKota = new();

    void Cancel()
    {
        MudDialog.Cancel();
    }

    bool success;

    string fotostring;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            dataProv = await _reference.GetAllprovinsi();
            dataKota = await _reference.GetAllKota();
            StateHasChanged();
        }
    }


    private async Task UploadFiles(IBrowserFile file)
    {
        var stream = file.OpenReadStream();
        using (var memstream = new MemoryStream())
        {
            await stream.CopyToAsync(memstream);
            userModel.Photo = memstream.ToArray();
            imagePath = $"data:image;base64,{Convert.ToBase64String(userModel.Photo)}";
        }
        
    }

    public async Task FilterKota(string ProvID)
    {
        filterKota = dataKota
            .Where(x => x.ProvinsiId == ProvID)
            .ToList();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        var options = new DialogOptions { BackgroundClass = "bg-filter", BackdropClick = false };
        var dial = await DialogService.ShowAsync<BluryDialog>("Updating...", options);
        var data = await _userService.Update(userModel, new CancellationToken());
        if (data.Flag)
        {
            dial.Close();
            MudDialog.Close(DialogResult.Ok(true));
            DialogService.ShowMessageBox(
                "Info",
                data.Message,
                "Ok");
        }
        else
        {
            dial.Close();
            DialogService.ShowMessageBox(
                "Error",
                data.Message,
                "Ok");
        }
    }

    private async Task<IEnumerable<Provinsi>> SearchProv(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return dataProv;
        return dataProv
            .Where(x => x.NamaProvinsi
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private async Task<IEnumerable<Kota>> SearchKota(string search, CancellationToken ct)
    {
        if (string.IsNullOrEmpty(search))
            return filterKota;
        return filterKota
            .Where(x => x.NamaKota
                .Contains(search, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

}
@using System.Text.Json
@using global::CoreLib.TakeExam
@using global::CoreLib.BankSoal
@using Web.Client.Interfaces
@using Web.Client.Shared.Extensions

<MudPaper Class="pa-4 ma-2 my-3">
    <div class="d-flex flex-grow-1 gap-1">
        <MudStack Class="pa-2 mr-2">
            <MudText Typo="Typo.body1">@data.Soal.Nomor</MudText>
        </MudStack>
        <MudStack>
            <MudText Class="m-2">@((MarkupString)data.Soal.Pertanyaan)</MudText>
            <MudDivider></MudDivider>
            <MudForm @ref="form">
                @if (data != null)
                {
                <MudRadioGroup @ref="refJawaban" T="SoalJawaban?" Class="mt-1" ValueChanged="OnPilihJawaban" Value="data.SoalJawaban">
                    @foreach (var jawaban in data.Soal!.PilihanJawaban!)
                    {
                    <MudItem xs="12" Class="my-1">
                        <MudRadio Value="@jawaban" Color="Color.Primary">@jawaban.Jawaban</MudRadio>
                    </MudItem>
                    }

                </MudRadioGroup>
                }
            </MudForm>
        </MudStack>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudStack>
                <MudSpacer/>
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Rounded.Close" OnClick="() => ClearJawaban(data)"></MudIconButton>
                <MudSpacer/>
            </MudStack>
        </MudHidden>


    </div>

</MudPaper>

@code {
    [Parameter] public UserAnswer data { get; set; }
    [Parameter] public EventCallback<SoalJawaban> UpdateJawaban { get; set; }
    [Inject] IUserExam _userExamRepo { get; set; }
    private MudRadioGroup<SoalJawaban>? refJawaban;
    private MudForm form;
    SoalJawaban currentJawaban;

    protected async override Task OnParametersSetAsync()
    {
        currentJawaban = data.SoalJawaban;
    }

    protected override void OnInitialized()
    {
        
        data.Soal.PilihanJawaban = data.Soal.PilihanJawaban.Shuffle().ToList();
    }

    protected override void OnParametersSet()
    {
        data.Soal.Pertanyaan = data.Soal.Pertanyaan.Replace("&nbsp;", " ");
        base.OnParametersSet();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            
            //reselect if reloaded
            if (data.SoalJawaban != null)
                data.SoalJawaban = data.Soal.PilihanJawaban.Find(x => x.Id == data.SoalJawabanId);
            StateHasChanged();
        }
    }

    private async Task OnPilihJawaban(SoalJawaban? obj)
    {
        if (obj == null)
            return;
        if (refJawaban == null)
            return;

        data.SoalJawaban = obj;
        data.SoalJawabanId = obj.Id;


        await UpdateJawaban.InvokeAsync(obj);
        StateHasChanged();
    }

    private async Task ClearJawaban(UserAnswer? currentSoal)
    {
        if (currentSoal != null)
        {
            data.SoalJawaban = null;
            data.SoalJawabanId = null;
            await UpdateJawaban.InvokeAsync(data.SoalJawaban);
        }

        StateHasChanged();
    }

}
@using System.Text.Json
@using global::Shared.TakeExam
@using global::Shared.BankSoal
@using Web.Client.Interfaces

<MudPaper Class="pa-4 ma-2 my-3">
    <div class="d-flex flex-grow-1 gap-1">
        <MudStack Class="pa-2 mr-2">
            <MudText Typo="Typo.body1">@data.Soal.Nomor</MudText>
        </MudStack>
        <MudPaper Class="flex-1 d-flex flex-column" Elevation="0">
            <MudText Class="m-2">@((MarkupString)data.Soal.Pertanyaan)</MudText>

            @if (data != null)
            {
                <MudRadioGroup @ref="refJawaban" T="SoalJawaban" Class="mt-1" ValueChanged="OnPilihJawaban" Value="data.SoalJawaban">

                    @foreach (var jawaban in data.Soal!.PilihanJawaban!)
                    {
                        <MudItem xs="12" Class="my-1">
                            <MudRadio Value="@jawaban" Color="Color.Primary">@jawaban.Jawaban</MudRadio>
                        </MudItem>
                    }

                </MudRadioGroup>
            }


        </MudPaper>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudStack>
                <MudSpacer/>
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Rounded.Close" OnClick="() => ClearJawaban(data)"></MudIconButton>
                <MudSpacer/>
            </MudStack>
        </MudHidden>
        

    </div>

</MudPaper>

@code {
    [Parameter] public UserAnswer data { get; set; }
    [Parameter] public EventCallback<SoalJawaban> UpdateJawaban { get; set; }
    [Inject] IUserExam _userExamRepo { get; set; }
    private MudRadioGroup<SoalJawaban>? refJawaban;

    SoalJawaban currentJaw;
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
        }
    }

    private async Task OnPilihJawaban(SoalJawaban? obj)
    {
        if (obj == null)
            return;
        if (refJawaban == null)
            return;
        data.SoalJawaban = obj;
        data.SoalJawabanId = obj.Id;
        
        
        await UpdateJawaban.InvokeAsync(obj);
        //reff.Value = obj;

        // var dto = new UpdateJawabanDTO()
        // {
        //     SoalJawabanId = obj.Id,
        //     UserExamId = userAnswer.UserExamId,
        //     UserAnswerId = userAnswer.Id,
        //     TimeLeft = TimeSpan.FromHours(1)
        // };
        //
        // var res = await _userExamRepo.UpdateJawaban(dto);
        // if (res.Flag)
        // {
        // }
        // else
        // {
        // }

        StateHasChanged();
    }

    private async Task ClearJawaban(UserAnswer? currentSoal)
    {
        if (currentSoal != null)
        {
            data.SoalJawaban = null;
            data.SoalJawabanId = null;
            await UpdateJawaban.InvokeAsync(data.SoalJawaban);
        }

        StateHasChanged();
    }

}
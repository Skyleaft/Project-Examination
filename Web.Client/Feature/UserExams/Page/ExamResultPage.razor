@page "/exam/examresult/{Id:Guid}"
@layout UserExamLayout
@attribute [Authorize(Roles = "Superuser,User")]
@inject IDialogService Dialog
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService SessionStorage
@using Blazored.SessionStorage
@using CoreLib.BankSoal
@using CoreLib.RoomSet
@using CoreLib.TakeExam
@using Microsoft.AspNetCore.Authorization
@using Web.Client.Feature.UserExams.Component
@using Web.Client.Interfaces
@implements IAsyncDisposable

<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="OnBeforeNavBack"/>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Width="100%" Class="pa-4">
        <MudText Align="Align.Center" Typo="Typo.h3">Hasil Ujian</MudText>
        <MudPaper Class="pa-4">
            <div id="unique_id_scroll_section" class="ma-0" style="height:200px;overflow: auto;">
                <MudStack Wrap="Wrap.Wrap" Spacing="4" Row="@true" AlignItems="AlignItems.Start">
                    @{
                        if (!isLoading)
                        {
                            foreach (var item in userExam.UserAnswers.OrderBy(x => x.Soal.Nomor))
                            {
                                <MudButton Variant="CheckSoalIsAnswer(item.Soal)"
                                           OnClick="()=>OnNomorSoalClick(item)"
                                           Color="@_answerColor"
                                           Style="width: 50px; height: 50px;">
                                    @item.Soal.Nomor
                                </MudButton>
                            }
                        }
                        else
                        {
                            {
                                <div class="d-none d-flex align-center flex-grow-1 ma-8">
                                    <MudSpacer/>
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                                    <MudSpacer/>
                                </div>
                            }
                        }
                    }

                </MudStack>
            </div>
        </MudPaper>

        @{
            if (isLoading)
            {
                <div class="d-none d-flex align-center flex-grow-1 ma-8">
                    <MudSpacer/>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    <MudSpacer/>
                </div>
            }
            else
            {
                <div class="d-none d-flex align-center flex-grow-1 ma-8">
                    <MudSpacer/>
                    <table>
                        <tr>
                            <td>
                                <MudText Typo="Typo.body1">Nama Ujian</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1">@room.Nama</MudText>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudText Typo="Typo.body1">Jumlah Soal</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1">@room.Exam.TotalSoal</MudText>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudText Typo="Typo.body1">Waktu Selesai</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1">
                                    @if (userExam.EndDate != null)
                                    {
                                        @userExam.EndDate.Value.ToLocalTime().ToString("dd/MM/yyyy - HH:mm")
                                    }
                                </MudText>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudText Typo="Typo.body1">Sisa Waktu</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1">
                                    <b>@userExam.TimeLeft.TotalMinutes.ToString("0") </b> Menit
                                </MudText>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudText Typo="Typo.body1">Total Score</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1">
                                    <b>@userExam.CalculateScore</b> / @room.Exam.TotalPoint
                                </MudText>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudText Typo="Typo.body1">Nilai</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.body1">
                                    <b>@userExam.CalculateScoreNormalize.Value.ToString("0.00")</b>
                                </MudText>
                            </td>
                        </tr>
                    </table>
                    <MudSpacer/>
                </div>
            }
        }

        <div class="d-flex justify-center flex-grow-1 gap-4">
            <MudButton Class="pa-4 my-4 "
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Start"
                       Variant="Variant.Filled"
                       OnClick="OnBackHome">
                Kembali Ke Menu!
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public string Id { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IUserExam _userExamRepo { get; set; }
    [Inject] IRoom _roomRepo { get; set; }
    private UserExam userExam;
    private Room room;
    private bool isLoading = true;
    private readonly CancellationTokenSource cts = new();
    private Color _answerColor;

    readonly DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, BackgroundClass = "bg-filter" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
            }

            userExam = await _userExamRepo.Get(new Guid(Id), cts.Token);
            room = await _roomRepo.Get(userExam.RoomId, cts.Token);

            isLoading = false;
            StateHasChanged();
        }
    }

    private Variant CheckSoalIsAnswer(Soal? soal)
    {
        if (room.IsShowKunci)
        {
            if (userExam.UserAnswers.Find(x => x.SoalId == soal.Id).SoalJawabanId == null)
            {
                _answerColor = Color.Default;
                return Variant.Outlined;
            }

            if (userExam.UserAnswers.Find(x => x.SoalId == soal.Id).SoalJawaban.Point != soal.MaxPoint)
            {
                _answerColor = Color.Error;
                return Variant.Filled;
            }

            _answerColor = Color.Success;
            return Variant.Filled;
        }

        _answerColor = Color.Default;
        return Variant.Outlined;
    }

    private async Task OnBackHome()
    {
        _navigationManager.NavigateTo("/userroom", true);
    }

    private async Task OnBeforeNavBack(LocationChangingContext locationChangingContext)
    {
        if (locationChangingContext.TargetLocation.Contains($"/exam/userexam/{Id}", StringComparison.OrdinalIgnoreCase))
        {
            locationChangingContext.PreventNavigation();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

    private async Task OnNomorSoalClick(UserAnswer? jawaban)
    {
        if (room.IsShowKunci)
        {
            var parameters = new DialogParameters<ViewJawabanDialog>();
            parameters.Add(x => x.jawabanUser, jawaban);
            parameters.Add(x => x.room, room);
            parameters.Add(x => x.forceShowJawaban, userExam.RetryCount == 0);
            var form = await Dialog.ShowAsync<ViewJawabanDialog>("Pembahasan Soal", parameters, maxWidth);
            var result = await form.Result;
        }
    }

}
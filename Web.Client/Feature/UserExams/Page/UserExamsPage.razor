@page "/exam/userexam/{Id:Guid}"
@layout UserExamLayout
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Superuser,User")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService Dialog
@inject ISessionStorageService SessionStorage
@using Blazored.SessionStorage
@using global::Shared.BankSoal
@using global::Shared.Common
@using global::Shared.RoomSet
@using global::Shared.TakeExam
@using Microsoft.AspNetCore.Authorization
@using Web.Client.Interfaces
@implements IDisposable

<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="OnBeforeNavBack"/>

@if (isLoading)
{
    <div class="d-none d-flex align-center flex-grow-1 ma-8">
        <MudSpacer/>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        <MudSpacer/>
    </div>
}
else
{
    <MudGrid>
        <MudItem md="9" xs="12">

            <div id="scroll_soal" class="ma-0" style="height:84vh;overflow: auto;">
                @{
                    foreach (var item in soalPaging.Items)
                    {
                        if (reRender)
                        {
                            <div class="d-none d-flex align-center flex-grow-1 ma-8">
                                <MudSpacer/>
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                                <MudSpacer/>
                            </div>
                        }
                        else
                        {
                            <MudPaper Class="pa-4 ma-2 my-3">
                                <div class="d-flex flex-grow-1 gap-1">
                                    <MudPaper Class="flex-none d-flex" Width="25px" Elevation="0">
                                        <MudText Typo="Typo.body1">@item.Soal.Nomor</MudText>
                                    </MudPaper>
                                    <MudPaper Class="flex-1 d-flex flex-column" Elevation="0">
                                        <MudText Class="m-2">@((MarkupString)item.Soal.Pertanyaan)</MudText>
                                        <MudRadioGroup T="SoalJawaban?" Class="mt-1" ValueChanged="OnPilihJawaban" Value="item.SoalJawaban">
                                            @{
                                                foreach (var jawaban in item.Soal.PilihanJawaban)
                                                {
                                                    <MudItem xs="12" Class="my-1">
                                                        <MudRadio Value="jawaban" Color="Color.Primary">@jawaban.Jawaban</MudRadio>
                                                    </MudItem>
                                                }
                                            }
                                        </MudRadioGroup>
                                    </MudPaper>
                                </div>

                            </MudPaper>
                        }
                    }
                }
            </div>
            <div class="d-none d-flex align-center flex-grow-1 mt-8">
                <MudSpacer/>
                <MudPagination Color="Color.Primary"
                               Count="@soalPaging.TotalPage"
                               SelectedChanged="PageChanged"/>
                <MudSpacer/>
            </div>

        </MudItem>
        <MudItem md="3" xs="12">
            <MudPaper Class="pa-4">
                <div id="unique_id_scroll_section" class="ma-0" style="height:200px;overflow: auto;">
                    <MudStack Wrap="Wrap.Wrap" Spacing="4" Row="@true" AlignItems="AlignItems.Start">
                        @{
                            foreach (var item in room.Exam.Soals)
                            {
                                <MudButton Variant="CheckSoalIsAnswer(item)"
                                           Color="Color.Primary"
                                           Style="width: 50px; height: 50px;">
                                    @item.Nomor
                                </MudButton>
                            }
                        }

                    </MudStack>
                </div>
            </MudPaper>

            <MudPaper Class="my-3">
                @{
                    if (isLoadTime)
                    {
                        <div class="d-none d-flex align-center flex-grow-1 ma-8">
                            <MudSpacer/>
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            <MudSpacer/>
                        </div>
                    }
                    else
                    {
                        <MudWatch @ref="_watch" Interval="TimeSpan.FromMilliseconds(1)" Mode="WatchMode.CountDown"
                                  CountdownTime="userExam.TimeLeft"
                                  CountdownCompleted="() => ForceEnd()"
                                  ShowHour="true" ShowMinute="true" ShowSecond="true" ShowMillisecond="false"
                                  Delimiter="@(":")" Typo="Typo.h5" Color="Color.Default"/>
                    }
                }


            </MudPaper>

            <div class="d-flex justify-center flex-grow-1 gap-4">
                <MudButton Class="pa-4 my-5 "
                           Color="Color.Warning"
                           OnClick="EndExam"
                           StartIcon="@Icons.Material.Filled.ExitToApp"
                           Variant="Variant.Filled">
                    Selesai!
                </MudButton>
            </div>

        </MudItem>
    </MudGrid>
}

<MudText>@testasd</MudText>


@code {
    [Parameter] public string Id { get; set; }
    [Inject] IUserExam _userExamRepo { get; set; }
    [Inject] IRoom _roomRepo { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }

    private Room room;
    private UserExam userExam;

    private List<UserAnswer> jawabanUser = new();

    MudExRichTextEdit Editor;
    MudWatch _watch = new();
    PaginatedResponse<UserAnswer> soalPaging;

    bool isLoading = true;
    bool reRender;
    string testasd;
    bool isLoadTime = true;
    readonly string privateKey = "zlxkjcoijasdfnwqwesfvlaksnoaiscnzxnocqanqwf";
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        _timer = new Timer(
            e =>
            {
                InvokeAsync(async () =>
                {
                    //testasd = DateTime.Now.ToString();
                    if (userExam != null)
                    {
                        await SessionStorage.SetItemAsync(privateKey, _watch.Value.TotalMilliseconds);
                    }

                    // Call this to force the server to send a new updated view
                });
            },
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(5)
        );
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
            }
            
            userExam = await _userExamRepo.Get(new Guid(Id));
            room = await _roomRepo.Get(userExam.RoomId);
            soalPaging = await userExam.UserAnswers.OrderBy(x => x.Soal.Nomor).ToPagingList(1, 10);

            var timeleft = await SessionStorage.GetItemAsStringAsync(privateKey);
            if (!string.IsNullOrEmpty(timeleft))
            {
                var timestr = TimeSpan.FromMilliseconds(double.Parse(timeleft));
                userExam.TimeLeft = timestr;
            }

            isLoading = false;
            isLoadTime = false;


            StateHasChanged();
        }

        _watch.Start();
    }

    private Variant CheckSoalIsAnswer(Soal soal)
    {
        if (userExam.UserAnswers == null)
            return Variant.Outlined;
        if (userExam.UserAnswers.Find(x => x.SoalId == soal.Id).SoalJawaban == null)
            return Variant.Outlined;
        return Variant.Filled;
    }

    private async Task PageChanged(int page)
    {
        reRender = true;
        soalPaging = await userExam.UserAnswers.OrderBy(x => x.Soal.Nomor).ToPagingList(page, 10);

        await reRenderSoal();
        StateHasChanged();
    }

    private async Task reRenderSoal()
    {
        await Task.Delay(150);
        reRender = false;
    }

    private async Task ForceEnd()
    {
        userExam.EndDate = DateTime.UtcNow;
        userExam.IsOngoing = false;
        userExam.IsDone = true;
        userExam.TimeLeft = _watch.Value;
        var res = await _userExamRepo.Update(userExam);
        if (res.Flag)
        {
            await SessionStorage.RemoveItemAsync(privateKey);
            _navigationManager.NavigateTo($"/exam/examresult/{Id}");
        }
    }


    private async Task EndExam()
    {
        var result = await Dialog.ShowMessageBox(
            "Warning",
            "Yakin Jawaban anda sudah benar?",
            "Ya", cancelText: "Tidak");
        StateHasChanged();
        if (result != null)
        {
            _watch.Stop();
            userExam.IsDone = true;
            userExam.IsOngoing = false;
            userExam.EndDate = DateTime.UtcNow;
            userExam.TimeLeft = _watch.Value;
            var res = await _userExamRepo.Update(userExam);
            if (res.Flag)
            {
                await SessionStorage.RemoveItemAsync(privateKey);
                _navigationManager.NavigateTo($"/exam/examresult/{Id}");
            }
        }
    }


    private async Task OnBeforeNavBack(LocationChangingContext locationChangingContext)
    {
        if (locationChangingContext.TargetLocation.Contains($"/exam/exambefore/{Id}"))
        {
            locationChangingContext.PreventNavigation();
        }
    }


    private async Task OnPilihJawaban(SoalJawaban? obj)
    {
        if (obj == null)
            return;
        userExam.UserAnswers!.Find(x => x.SoalId == obj.SoalId).SoalJawaban = obj;
        userExam.UserAnswers!.Find(x => x.SoalId == obj.SoalId).SoalJawabanId = obj.Id;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}
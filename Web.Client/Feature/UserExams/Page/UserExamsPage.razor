@page "/exam/userexam/{Id:Guid}"
@layout UserExamLayout
@attribute [Authorize(Roles = "Superuser,User")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService Dialog
@inject ISessionStorageService SessionStorage
@implements IBrowserViewportObserver
@using Blazored.SessionStorage
@using CoreLib.BankSoal
@using CoreLib.Common
@using CoreLib.RoomSet
@using CoreLib.TakeExam
@using Microsoft.AspNetCore.Authorization
@using MudBlazor.Services
@using Web.Client.Feature.UserExams.Component
@using Web.Client.Interfaces
@implements IAsyncDisposable

<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="OnBeforeNavBack"/>

@if (isLoading)
{
    <div class="d-none d-flex align-center flex-grow-1 ma-8">
        <MudSpacer/>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        <MudSpacer/>
    </div>
}
else
{
    <MudGrid>
        <MudItem md="9" xs="12">
            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem xs="12">
                    <div id="scroll_soal" class="ma-0" style="height:@(_height * 0.8)px;overflow: auto;">
                        @{
                            foreach (var item in soalPaging.Items)
                            {
                                <SoalCard data="item"
                                          UpdateJawaban="async sj => await OnUpdateJawaban(sj, item)" reRender="reRender"/>
                            }
                        }
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="d-none d-flex align-center flex-grow-1 mb-2" style="height:@(_height * 0.1)px">
                        <MudSpacer/>
                        <MudPagination @ref="refPaging"
                                       Color="Color.Primary"
                                       Selected="@currentPage"
                                       Count="@soalPaging.TotalPage"
                                       SelectedChanged="PageChanged"/>
                        <MudSpacer/>
                    </div>
                </MudItem>
            </MudGrid>


        </MudItem>
        <MudItem md="3" xs="12">
            <MudPaper Class="pa-4">
                <div id="unique_id_scroll_section" class="ma-0" style="height:200px;overflow: auto;">
                    <MudStack Wrap="Wrap.Wrap" Spacing="4" Row="@true" AlignItems="AlignItems.Start">
                        @{
                            foreach (var item in room.Exam.Soals)
                            {
                                <MudButton Variant="CheckSoalIsAnswer(item)"
                                           OnClick="()=>OnNavigNumber(item.Nomor)"
                                           Color="Color.Primary"
                                           Style="width: 50px; height: 50px;">
                                    @item.Nomor
                                </MudButton>
                            }
                        }

                    </MudStack>
                </div>
            </MudPaper>

            <MudPaper Class="my-3">
                @{
                    if (isLoadTime)
                    {
                        <div class="d-none d-flex align-center flex-grow-1 ma-8">
                            <MudSpacer/>
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            <MudSpacer/>
                        </div>
                    }
                    else
                    {
                        <MudWatch @ref="_watch" Interval="TimeSpan.FromMilliseconds(1)" Mode="WatchMode.CountDown"
                                  CountdownCompleted="() => ForceEnd()"
                                  CountdownTime="_timer"
                                  ShowHour="true" ShowMinute="true" ShowSecond="true" ShowMillisecond="false"
                                  Delimiter="@(":")" Typo="Typo.h5" Color="Color.Default"/>
                    }
                }


            </MudPaper>

            <div class="d-flex justify-center flex-grow-1 gap-4 mb-4">
                <MudButton Class="pa-4 my-5 "
                           FullWidth="true"
                           Color="Color.Warning"
                           OnClick="EndExam"
                           StartIcon="@Icons.Material.Filled.ExitToApp"
                           Variant="Variant.Filled">
                    Selesai!
                </MudButton>
            </div>

        </MudItem>
    </MudGrid>
}

<MudText>@testasd</MudText>


@code {
    [Parameter] public string Id { get; set; }
    [Inject] IUserExam _userExamRepo { get; set; }
    [Inject] IRoom _roomRepo { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }

    private MudPagination refPaging;
    int currentPage = 1;

    private int _width;
    private int _height;

    private Room room;
    private UserExam userExam;

    private List<UserAnswer> jawabanUser = new();

    MudWatch _watch = new();
    PaginatedResponse<UserAnswer> soalPaging;
    TimeSpan _timer;
    private readonly CancellationTokenSource cts = new();

    bool isLoading = true;
    bool reRender = true;
    string testasd;
    bool isLoadTime = true;
    readonly string privateKey = "zlxkjcoijasdfnwqwesfvlaksnoaiscnzxnocqanqwf";

    protected override async Task OnInitializedAsync()
    {
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this);

            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
            }

            userExam = await _userExamRepo.Get(new Guid(Id), cts.Token);
            soalPaging = await userExam.UserAnswers!.OrderBy(x => x.Soal!.Nomor).ToPagingList(1, 10);
            room = await _roomRepo.Get(userExam.RoomId, cts.Token);


            _timer = userExam.TimeLeft;


            //jawabanUser = await _userExamRepo.GetUserAnswers(userExam.Id);
            // foreach (var item in jawabanUser)
            // {
            //     item.Soal = room.Exam.Soals.Find(x => x.Id == item.SoalId);
            // }


            reRender = false;
            isLoading = false;
            isLoadTime = false;


            StateHasChanged();
            await DelayStart();
        }
    }

    private async Task DelayStart()
    {
        await Task.Delay(1000, cts.Token);
        Console.WriteLine("Timer Start");
        _watch.Start();
        StateHasChanged();
    }

    private Variant CheckSoalIsAnswer(Soal soal)
    {
        if (userExam.UserAnswers == null)
            return Variant.Outlined;
        if (userExam.UserAnswers.Find(x => x.SoalId == soal.Id)!.SoalJawabanId == null)
            return Variant.Outlined;
        return Variant.Filled;
    }

    private async Task PageChanged(int page)
    {
        reRender = true;
        await Task.Delay(150, cts.Token);
        currentPage = page;
        if (userExam.UserAnswers != null) soalPaging = await userExam.UserAnswers.OrderBy(x => x.Soal.Nomor).ToPagingList(page, 10);

        await reRenderSoal();
        StateHasChanged();
    }

    private async Task OnNavigNumber(int nomor)
    {
        var page = Math.Floor((double)nomor / 10);
        await refPaging.NavigateToAsync((int)page);
    }

    private async Task reRenderSoal()
    {
        await Task.Delay(150, cts.Token);
        reRender = false;
    }

    private async Task ForceEnd()
    {
        userExam.EndDate = DateTime.UtcNow;
        userExam.IsOngoing = false;
        userExam.IsDone = true;
        userExam.TimeLeft = _watch.Value;
        var res = await _userExamRepo.Update(userExam, cts.Token);
        if (res.Flag)
        {
            await SessionStorage.RemoveItemAsync(privateKey);
            _navigationManager.NavigateTo($"/exam/examresult/{Id}");
        }
    }


    private async Task EndExam()
    {
        var result = await Dialog.ShowMessageBox(
            "Warning",
            "Yakin semua pertanyaan anda sudah dijawab semua?",
            "Ya", cancelText: "Tidak");
        StateHasChanged();
        if (result != null)
        {
            _watch.Stop();
            userExam.IsDone = true;
            userExam.IsOngoing = false;
            userExam.EndDate = DateTime.UtcNow;
            userExam.TimeLeft = _watch.Value;
            var res = await _userExamRepo.Update(userExam, cts.Token);
            if (res.Flag)
            {
                await SessionStorage.RemoveItemAsync(privateKey);
                _navigationManager.NavigateTo($"/exam/examresult/{Id}");
            }
        }
    }


    private async Task OnBeforeNavBack(LocationChangingContext locationChangingContext)
    {
        if (locationChangingContext.TargetLocation.Contains($"/exam/exambefore/{Id}"))
        {
            locationChangingContext.PreventNavigation();
        }
    }


    private async Task OnUpdateJawaban(SoalJawaban? obj, UserAnswer userAnswer)
    {
        await _watch.Stop();
        //Console.WriteLine(JsonSerializer.Serialize(obj));
        var dto = new UpdateJawabanDTO
        {
            SoalJawabanId = obj?.Id ?? null,
            UserExamId = userExam.Id,
            UserAnswerId = userAnswer.Id,
            TimeLeft = _watch.Value
        };

        var res = await _userExamRepo.UpdateJawaban(dto, cts.Token);
        if (res.Flag)
        {
            _watch.Start();
        }

        _watch.Start();
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
        await BrowserViewportService.UnsubscribeAsync(this);
    }

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    public Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;
        _height = browserViewportEventArgs.BrowserWindowSize.Height;

        return InvokeAsync(StateHasChanged);
    }


}
@page "/exam/exambefore/{Id:Guid}"
@layout UserExamLayout
@attribute [Authorize(Roles = "Superuser,User")]
@inject IDialogService Dialog
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService SessionStorage
@using Blazored.SessionStorage
@using CoreLib.RoomSet
@using CoreLib.TakeExam
@using Microsoft.AspNetCore.Authorization
@using Web.Client.Interfaces
@implements IAsyncDisposable

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Width="100%" Class="pa-4">
        <MudText Typo="Typo.h3" Align="Align.Center">Sebelum Memulai Ujian</MudText>
        <MudPaper Height="350px" Style="overflow: auto;" Elevation="0" Class="pa-2">
            <MudText Typo="Typo.h5">Ketentuan Ujian Online</MudText>
            <p>Selamat datang dalam ujian online. Sebelum memulai ujian, harap membaca dan memahami ketentuan
                berikut:</p>

            <h2>Persiapan Ujian</h2>
            <ul>
                <li>- Pastikan koneksi internet Anda stabil.</li>
                <li>- Siapkan alat tulis dan kertas jika diperlukan untuk perhitungan manual.</li>
                <li>- Pastikan perangkat yang digunakan dalam kondisi baik (laptop/komputer/smartphone).</li>
            </ul>

            <h2>Pelaksanaan Ujian</h2>
            <ul>
                <li>- Ujian ini bersifat <strong>tertutup</strong>. Anda tidak diperkenankan membuka buku, catatan, atau
                    sumber lain kecuali yang diizinkan.
                </li>
                <li>- Jangan melakukan komunikasi dengan peserta ujian lain atau orang di luar selama ujian
                    berlangsung.
                </li>
                <li>- Pastikan Anda berada di tempat yang tenang dan bebas dari gangguan.</li>
            </ul>

            <h2>Teknis Ujian</h2>
            <ul>
                <li>- Login ke sistem ujian dengan akun yang telah disediakan.</li>
                <li>- Baca setiap soal dengan teliti sebelum menjawab.</li>
                <li>- Jawablah semua soal sesuai dengan instruksi yang diberikan.</li>
                <li>- Jika mengalami kendala teknis, segera hubungi pengawas ujian melalui kontak yang telah
                    disediakan.
                </li>
            </ul>

            <h2>Kedisiplinan dan Integritas</h2>
            <ul>
                <li>- Setiap bentuk kecurangan akan dikenakan sanksi sesuai dengan peraturan yang berlaku.</li>
                <li>- Pengawasan dilakukan secara online melalui kamera dan aplikasi proktor.</li>
                <li>- Waktu ujian akan tercatat secara otomatis, dan ujian akan berakhir sesuai dengan waktu yang
                    ditentukan.
                </li>
            </ul>

            <h2>Penyerahan Jawaban</h2>
            <ul>
                <li>- Pastikan semua jawaban telah tersimpan sebelum waktu ujian berakhir.</li>
                <li>- Klik tombol "Submit" untuk menyerahkan jawaban Anda.</li>
                <li>- Setelah menyerahkan jawaban, Anda tidak dapat melakukan perubahan apapun.</li>
            </ul>

            <p>Dengan memulai ujian ini, Anda menyetujui semua ketentuan di atas dan bersedia mengikuti ujian dengan
                jujur dan bertanggung jawab.</p>

            <br/>
            <p>Selamat mengerjakan dan semoga sukses!</p>
        </MudPaper>
        <MudPaper Class="pa-3" Elevation="0">
            <div class="d-flex justify-center flex-grow-1 gap-4">
                @{
                    if (isLoading)
                    {
                        <div class="d-none d-flex align-center flex-grow-1 ma-8">
                            <MudSpacer/>
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                            <MudSpacer/>
                        </div>
                    }
                    else
                    {
                        <table>
                            <tr>
                                <td>
                                    <MudText Typo="Typo.body1">Nama Ujian</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1">@room.Nama</MudText>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <MudText Typo="Typo.body1">Jumlah Soal</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1">@room.Exam.TotalSoal</MudText>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <MudText Typo="Typo.body1">Jadwal Ujian</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                                </td>
                                <td>
                                    <MudText
                                        Typo="Typo.body1">@room.JadwalStart.ToLocalTime().ToString("dd/MM/yyyy HH:mm") -> @room.JadwalEnd.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <MudText Typo="Typo.body1">Durasi Ujian</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1" Class="mx-2">:</MudText>
                                </td>
                                <td>
                                    <MudText Typo="Typo.body1"><b>@userExam.TimeLeft.TotalMinutes.ToString("0") </b>
                                        Menit
                                    </MudText>
                                </td>
                            </tr>
                        </table>
                    }
                }
            </div>


            <div class="d-flex justify-center flex-grow-1 gap-4">
                <MudButton Class="pa-4 my-4 "
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Start"
                           Variant="Variant.Filled"
                           OnClick="OnMulai">
                    Mulai Ujian!
                </MudButton>
            </div>
        </MudPaper>


    </MudPaper>
</MudContainer>

@code {
    [Parameter] public string Id { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    [Inject] IUserExam _userExamRepo { get; set; }
    [Inject] IRoom _roomRepo { get; set; }
    private UserExam userExam;
    private Room room;
    private bool isLoading = true;
    readonly string privateKey = "zlxkjcoijasdfnwqwesfvlaksnoaiscnzxnocqanqwf";
    private readonly CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth is not null)
            {
            }

            userExam = await _userExamRepo.Get(new Guid(Id), cts.Token);
            room = await _roomRepo.Get(userExam.RoomId, cts.Token);

            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnMulai()
    {
        if (userExam.IsDone)
        {
            _navigationManager.NavigateTo($"/exam/examresult/{Id}");
        }
        else
        {
            var res = await _userExamRepo.StartExam(userExam.Id, cts.Token);
            if (res.Flag)
            {
                _navigationManager.NavigateTo($"exam/userexam/{Id}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await cts.CancelAsync();
        cts.Dispose();
    }

}
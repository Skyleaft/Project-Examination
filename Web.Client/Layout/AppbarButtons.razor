@inject AuthenticationStateProvider AuthenticationStateProvider
<MudTooltip Delay="1000" Text="Notifications">
    <MudBadge Color="Color.Secondary" Dot="true" Overlap="true" Visible="_newNotificationsAvailable">
        <MudMenu Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft"
                 TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow"
                 ListClass="pa-2 docs-menu-list" LockScroll="true">
            <div class="d-flex justify-space-between align-center px-2">
                <MudText Typo="Typo.subtitle2">Notifications</MudText>
                <MudButton Disabled="@(_newNotificationsAvailable == false)" OnClick="MarkNotificationAsRead"
                           StartIcon="@Icons.Material.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary"
                           Class="ml-16 mr-n2">Mark as read
                </MudButton>
            </div>
            @if (_messages != null)
            {
                @foreach (var (message, isRead) in _messages.Take(5))
                {
                    <MudMenuItem Class="px-2 py-0 rounded" Href="@($"/mud/announcements/{message.Id}")">
                        <MudText Typo="Typo.subtitle2">@message.Title</MudText>
                        <MudText
                            Typo="Typo.body2">@($"{message.Authors.FirstOrDefault()?.DisplayName} • {message.PublishDate.ToString("MM/dd/yyyy")}")</MudText>
                    </MudMenuItem>
                    <MudDivider Class="my-2"/>
                }
            }
            else
            {
                <div class="d-flex justify-center align-center px-2 py-8 relative">
                    <MudText Class="mud-text-secondary my-12">Nothing new :(</MudText>
                    <MudBlazorLogo Class="docs-logo-filter mx-16 absolute"/>
                </div>
            }
        </MudMenu>
    </MudBadge>
</MudTooltip>
<MudTooltip Delay="1000" Text="@(DarkLightModeButtonText)">
    <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit"
                   OnClick="@LayoutService.CycleDarkLightModeAsync"/>
</MudTooltip>

<MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
    <MudDivider FlexItem="true" Vertical="true" DividerType="DividerType.Middle" Class="mx-4 my-4"/>
    <AuthorizeView>
        <Authorized>
            @{
                if (string.IsNullOrEmpty(_avaSource))
                {
                    <MudBadge Color="Color.Success" Overlap="true" Bordered="true" Class="mr-3">
                        <MudAvatar Style="height:35px; width:35px;" Color="Color.Primary">
                            @context.User.Identity.Name[0]
                        </MudAvatar>
                    </MudBadge>
                }
                else
                {
                    <MudBadge Color="Color.Success" Overlap="true" Bordered="true" Class="mr-3">
                        <MudAvatar Style="height:35px; width:35px;">
                            <MudImage Src="@_avaSource"></MudImage>
                        </MudAvatar>
                    </MudBadge>
                }
            }
            <MudText Class="mr-2">@context.User.Identity.Name</MudText>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomLeft"
                     TransformOrigin="Origin.TopRight">
                <MudMenuItem>Profile</MudMenuItem>
                <MudMenuItem>My account</MudMenuItem>
                <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
            </MudMenu>
        </Authorized>
        <NotAuthorized>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/Account/Login">Login</MudButton>
        </NotAuthorized>
    </AuthorizeView>
</MudHidden>

@code
{
    private string? currentUrl;

}
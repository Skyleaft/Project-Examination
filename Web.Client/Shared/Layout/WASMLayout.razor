
@using Web.Client.Services
@using Web.Client.Shared.Theme
@inherits LayoutComponentBase
<MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="LayoutService.SetDarkMode"/>


<MudSnackbarProvider />
<MudPopoverProvider/>
<MudDialogProvider/>

<MudLayout>
    <MudAppBar Class="docs-appbar-filter" Color="Color.Transparent" Elevation="0"></MudAppBar>
    <MudAppBar Class="docs-appbar" Elevation="0">
        <MudButton OnClick="Back" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Kembali ke Menu</MudButton>
        <MudDivider FlexItem="true" Vertical="true" DividerType="DividerType.Middle" Class="mx-4 my-4"/>
    </MudAppBar>
    <MudMainContent >
        <MudContainer MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _mudThemeProvider;
    [Inject] private LayoutService LayoutService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    
    private void Back(MouseEventArgs obj)
    {
        _navigationManager.NavigateTo("/BankSoal",true);
    }
    
    protected override Task OnInitializedAsync()
    {
        LayoutService.SetBaseTheme(Themes.LandingPageTheme());
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        LayoutService.MajorUpdateOccurred += LayoutServiceOnMajorUpdateOccured;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await ApplyUserPreferences();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            
            StateHasChanged();
        }
    }
    
    private async Task ApplyUserPreferences()
    {
        var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        await LayoutService.ApplyUserPreferences(defaultDarkMode);
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        await LayoutService.OnSystemPreferenceChanged(newValue);
    }
    
    public void Dispose()
    {
        LayoutService.MajorUpdateOccurred -= LayoutServiceOnMajorUpdateOccured;
    }
    private void LayoutServiceOnMajorUpdateOccured(object sender, EventArgs e) => StateHasChanged();
    
}